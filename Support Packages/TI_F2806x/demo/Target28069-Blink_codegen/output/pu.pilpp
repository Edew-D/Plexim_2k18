
















 


















 



















 








 



 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

 

    typedef          int    int16_t;
    typedef unsigned int   uint16_t;
    typedef          long   int32_t;
    typedef unsigned long  uint32_t;


    typedef          long long  int64_t;
    typedef unsigned long long uint64_t;

 

    typedef  int16_t  int_least8_t;
    typedef uint16_t uint_least8_t;

    typedef  int16_t  int_least16_t;
    typedef uint16_t uint_least16_t;
    typedef  int32_t  int_least32_t;
    typedef uint32_t uint_least32_t;


    typedef  int64_t  int_least64_t;
    typedef uint64_t uint_least64_t;

 

    typedef  int16_t  int_fast8_t;
    typedef uint16_t uint_fast8_t;
    typedef  int16_t  int_fast16_t;
    typedef uint16_t uint_fast16_t;

    typedef  int32_t  int_fast32_t;
    typedef uint32_t uint_fast32_t;


    typedef  int64_t  int_fast64_t;
    typedef uint64_t uint_fast64_t;

 
    typedef          long intptr_t;
    typedef unsigned long uintptr_t;

 
    typedef          long long intmax_t;
    typedef unsigned long long uintmax_t;





 

 
















 







 







 




 































 






 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 



#pragma diag_push
#pragma CHECK_MISRA("-6.3")  
#pragma CHECK_MISRA("-8.5")  
#pragma CHECK_MISRA("-19.1")  
#pragma CHECK_MISRA("-19.7")  
#pragma CHECK_MISRA("-20.1")  
#pragma CHECK_MISRA("-20.2")  

 
 
 



#pragma diag_push
#pragma CHECK_MISRA("-5.7")  

typedef struct { int quot, rem; } div_t;

typedef struct { long quot, rem; } ldiv_t;

typedef struct { long long quot, rem; } lldiv_t;

#pragma diag_pop



typedef unsigned long size_t;

typedef unsigned int wchar_t;



 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 


#pragma diag_push
#pragma CHECK_MISRA("-19.4")  

 


 
 
 

 
 
 

 
 
 

#pragma diag_pop


 
 
 
 
 
 
 
#pragma diag_push
#pragma CHECK_MISRA("-16.4")  
      int       abs(int _val); 
      long      labs(long _val);
      long long llabs(long long _val);
#pragma diag_pop

     int       atoi(const char *_st);
     long      atol(const char *_st);
     long long atoll(const char *_st);
     int       ltoa(long val, char *buffer);
          static __inline double    atof(const char *_st);

     long      strtol(const char *_st, char **_endptr, int _base);
     unsigned long strtoul(const char *_st, char **_endptr,
    					  int _base);
     long long strtoll(const char *_st, char **_endptr, int _base);
     unsigned long long strtoull(const char *_st, char **_endptr,
					     int _base);
     float     strtof(const char * _st, 
                                  char ** _endptr);
     double    strtod(const char * _st, 
                                  char ** _endptr);
     long double strtold(const char * _st, 
                                     char ** _endptr);
    
     int    rand(void);
     void   srand(unsigned _seed);
    
     void  *calloc(size_t _num, size_t _size)
               __attribute__((malloc));
     void  *malloc(size_t _size)
               __attribute__((malloc));
     void  *realloc(void *_ptr, size_t _size)
               __attribute__((malloc));
     void   free(void *_ptr);
     void  *memalign(size_t _aln, size_t _size)
               __attribute__((malloc));
    
     void   abort(void); 

    typedef void (*__TI_atexit_fn)(void);
     int    atexit(__TI_atexit_fn _func);

    typedef int (*__TI_compar_fn)(const void *_a,const void *_b);
     void  *bsearch(const void *_key, const void *_base,
                                size_t _nmemb, size_t _size, 
                                __TI_compar_fn compar);
     void   qsort(void *_base, size_t _nmemb, size_t _size, 
                              __TI_compar_fn compar);

     void   exit(int _status);
    
     div_t  div(int _numer, int _denom);
     ldiv_t ldiv(long _numer, long _denom);
     lldiv_t lldiv(long long _numer, long long _denom);

     char  *getenv(const char *_string);
     int    system(const char *_name);

     int    mblen(const char *_s, size_t _n);
     size_t mbstowcs(wchar_t *_dest, const char *_src, size_t _n);
     int    mbtowc(wchar_t *_dest, const char *_src, size_t _n);

     size_t wcstombs(char *_dest, const wchar_t *_src, size_t _n);
     int    wctomb(char *_s, wchar_t _wc);





static __inline double atof(const char *_st) 
{
  return strtod(_st, (char **)0); 
}




#pragma diag_pop


#pragma diag_push


 
 
#pragma CHECK_MISRA("-19.15")


#pragma diag_pop

#pragma diag_push

 
#pragma CHECK_MISRA("-19.1")
#pragma CHECK_MISRA("-19.15")

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#pragma diag_push
#pragma CHECK_MISRA("-6.3")

 long          far_strtol (const char *st,
                                       char **endptr, 
				       int base);
 unsigned long far_strtoul(const char *st,
                                       char **endptr, 
				       int base);
 double        far_strtod (const char *st,
                                       char **endptr);
 long double   far_strtold (const char *st,
                                        char **endptr);
 long long     far_strtoll(const char *st,
                                       char **endptr, 
		 		       int base);
 unsigned long long far_strtoull(const char *st, 
                                                   char **endptr,
                                                   int base);
 int           far_atoi(const char *st);
 long          far_atol(const char *st);
static __inline       double        far_atof(const char *st);
 long long     far_atoll(const char *st);

 void     *far_calloc  (unsigned long num, unsigned long size);
 void     *far_malloc  (unsigned long size);
 void     *far_realloc (void *ptr, unsigned long size);
 void          far_free    (void *ptr);

 void     *far_bsearch(const void *key, 
                                       const void *base, 
			               size_t nmemb, size_t size, 
			               int (*compar)(const void *a,
                                                     const void *b));
 void          far_qsort  (void *base, 
                                       size_t nmemb, size_t size,
			               int (*compar)(const void *a, 
                                                     const void *b));

 int	   free_memory(void);
 int           max_free(void);
 void         *chkheap(void);

#pragma diag_push
#pragma CHECK_MISRA("-8.5")  
static __inline double far_atof(const char *st) 
{ 
   return far_strtod(st, (char **)0);
}
#pragma diag_pop


#pragma diag_pop


#pragma diag_push


 
 
#pragma CHECK_MISRA("-19.15")


#pragma diag_pop

#pragma diag_pop



 




 



 



 



 





 




 
typedef enum
{
   PIL_CLBK_LEAVE_NORMAL_OPERATION_REQ, 
   PIL_CLBK_ENTER_NORMAL_OPERATION_REQ, 
   PIL_CLBK_PREINIT_SIMULATION,      	
   PIL_CLBK_INITIALIZE_SIMULATION,      
   PIL_CLBK_TERMINATE_SIMULATION,       
   PIL_CLBK_STOP_TIMERS,                
   PIL_CLBK_START_TIMERS                
} PIL_CtrlCallbackReq_t;





 
extern void PilInitOverrideProbes(void);







 
extern void PilInitCalibrations(void);




 
typedef void(*PIL_CtrlCallbackPtr_t)(PIL_CtrlCallbackReq_t);





 
typedef void(*PIL_CommCallbackPtr_t)();




 
extern void PIL_init(void);







 
extern void PIL_setLinkParams(const unsigned char* aGuid, PIL_CommCallbackPtr_t aCommPtr);






 
extern void PIL_setNodeAddress(unsigned char aNode);






 
extern void PIL_setCtrlCallback(PIL_CtrlCallbackPtr_t aCtrlPtr);






 
extern void PIL_setBackgroundCommCallback(PIL_CommCallbackPtr_t aBackgroundCommPtr);







 
extern void PIL_allowPilSimulation(void);







 
extern void PIL_inhibitPilSimulation(void);






 
void PIL_requestNormalMode(void);






 
void PIL_requestReadyMode(void);





 
extern _Bool PIL_simulationActive(void);








 
extern void PIL_RA_serialIn(int16_t aChar);









 
extern _Bool PIL_RA_serialOut(int16_t* aChar);




 
extern _Bool PIL_RA_serialOutIsSynchronized(void);




 
extern void PIL_beginInterruptCall(void);



 
extern void PIL_backgroundCall(void);













 
extern void PIL_RA_parallelIn(uint16_t *aBuf, uint16_t aLen);
















 
extern void PIL_RA_parallelOut(uint16_t *aBuf, uint16_t *aLen);



 



 



 
extern const unsigned char PIL_D_Guid[];



 



 



 
typedef struct
{
   int q;       
   float ref;   
   char *unit;  
} pil_var;



 
typedef struct
{
   float min;	
   float max;	
   float dval;	
   int level;	
} pil_var_wa;



 



 



 



 









 
struct PU_VARS {
	uint16_t dummy;
};

extern struct PU_VARS PuVars;

extern void InitPuVars();


struct PU_VARS PuVars;

void InitPuVars()
{
	PuVars.dummy =  0;
}
