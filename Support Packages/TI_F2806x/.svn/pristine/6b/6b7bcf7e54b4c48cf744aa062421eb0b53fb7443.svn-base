Plecs {
  Name          "Target28069-Blink"
  Version       "4.2"
  CircuitModel  "ContStateSpace"
  StartTime     "0.0"
  StopTime      "1.0"
  Timeout       ""
  Solver        "dopri"
  MaxStep       "1e-3"
  InitStep      "-1"
  FixedStep     "1e-3"
  Refine        "1"
  ZCStepSize    "1e-9"
  RelTol        "1e-3"
  AbsTol        "-1"
  TurnOnThreshold "0"
  SyncFixedStepTasks "2"
  UseSingleCommonBaseRate "2"
  LossVariableLimitExceededMsg "3"
  NegativeSwitchLossMsg "3"
  DivisionByZeroMsg "3"
  StiffnessDetectionMsg "2"
  MaxConsecutiveZCs "1000"
  AlgebraicLoopWithStateMachineMsg "2"
  AssertionAction "1"
  InitializationCommands "Ts_plant = 5e-6;\nTs_controller = 100e-6;"
  InitialState  "1"
  SystemState   ""
  CodeGenParameterInlining "2"
  CodeGenInliningExceptions "AAAACwAAAAAA"
  CodeGenFloatingPointFormat "2"
  CodeGenIntegerWordSize "32"
  CodeGenAbsTimeUsageMsg "3"
  CodeGenBaseName ""
  CodeGenOutputDir ""
  CodeGenExtraOpts ""
  CodeGenTarget "Generic"
  CodeGenTargetSettings "AAAAfwAAAAAWUU1hcDxRU3RyaW5nLFFTdHJpbmc+AAAAAAA="
  ExtendedMatrixPrecision "1"
  MatrixSignificanceCheck "2"
  EnableStateSpaceSplitting "2"
  DisplayStateSpaceSplitting "1"
  DiscretizationMethod "2"
  ExternalModeSettings "AAAAfwAAAAAWUU1hcDxRU3RyaW5nLFFTdHJpbmc+AAAAAAYAAAAYAF"
"QAcgBpAGcAZwBlAHIAVgBhAGwAdQBlAAAAAgAwAAAAGABUAHIAaQBnAGcAZQByAEQAZQBsAGEAeQA"
"AAAIAMAAAABYAUwBlAG4AcwBpAHQAaQB2AGkAdAB5AAAAAgAwAAAAFgBSAGUAZgByAGUAcwBoAFIA"
"YQB0AGUAAAAEADIAMAAAABQATgB1AG0AUwBhAG0AcABsAGUAcwAAAAgAOAAxADkAMgAAABQARABlA"
"GMAaQBtAGEAdABpAG8AbgAAAAIAMQ=="
  AlgebraicLoopMethod "1"
  AlgebraicLoopTolerance "1e-6"
  Schematic {
    Location      [374, 543; 716, 730]
    ZoomFactor    1
    SliderPosition [0, 0]
    ShowBrowser   off
    BrowserWidth  100
    Component {
      Type          Subsystem
      Name          "Controls"
      Show          on
      Position      [175, 75]
      Direction     up
      Flipped       off
      Frame         [-95, -25; 95, 25]
      LabelPosition [0, 28]
      LabelAlign    up
      TreatAsAtomicUnit on
      SampleTime    "-1"
      CodeGenEnable on
      CodeGenSampleTime "Ts_controller"
      CodeGenTarget "TI28069"
      CodeGenTargetSettings "AAAAfwAAAAAWUU1hcDxRU3RyaW5nLFFTdHJpbmc+AAAAAAkAA"
"AASAHUAcwBlAEkAbgB0AE8AcwBjAAAAAgAxAAAALgB0AGkAbQBlAEIAYQBzAGUAVAByAGkAZwBnAG"
"UAcgBSAGUAcwBvAHUAcgBjAGUAAAACADEAAAAeAHQAaQBtAGUAQgBhAHMAZQBUAHIAaQBnAGcAZQB"
"yAAAAAgAxAAAAJgB0AGkAbQBlAEIAYQBzAGUAQwBsAGsAUgBlAHMAbwB1AHIAYwBlAAAAAgAxAAAA"
"FgB0AGkAbQBlAEIAYQBzAGUAQwBsAGsAAAACADMAAAAOAHQAYQBzAGsAMgBIAHoAAAAGADEAMAAwA"
"AAAEABzAHkAcwBDAGwAawBIAHoAAAAQADkAMAAwADAAMAAwADAAMAAAABAAZQB4AHQAQwBsAGsASA"
"B6AAAAEAAyADAAMAAwADAAMAAwADAAAAAgAGQATwB1AHQAUABzAEUAbgBhAGIAbABlAEcAUABJAE8"
"AAAAEADIANw=="
      ExternalModeSettings "AAAAfwAAAAAWUU1hcDxRU3RyaW5nLFFTdHJpbmc+AAAAAAYAAA"
"AYAFQAcgBpAGcAZwBlAHIAVgBhAGwAdQBlAAAAAgAwAAAAGABUAHIAaQBnAGcAZQByAEQAZQBsAGE"
"AeQAAAAIAMAAAABYAUwBlAG4AcwBpAHQAaQB2AGkAdAB5AAAAAgAwAAAAFgBSAGUAZgByAGUAcwBo"
"AFIAYQB0AGUAAAAEADIAMAAAABQATgB1AG0AUwBhAG0AcABsAGUAcwAAAAgAOAAxADkAMgAAABQAR"
"ABlAGMAaQBtAGEAdABpAG8AbgAAAAIAMQ=="
      MaskIconFrame on
      MaskIconOpaque off
      MaskIconRotates on
      Terminal {
        Type          Output
        Position      [99, -15]
        Direction     right
        Index         "1"
      }
      Terminal {
        Type          Output
        Position      [99, -5]
        Direction     right
        Index         "2"
      }
      Terminal {
        Type          Input
        Position      [-95, -15]
        Direction     left
        Index         "1"
      }
      Terminal {
        Type          Output
        Position      [99, 5]
        Direction     right
        Index         "3"
      }
      Terminal {
        Type          Input
        Position      [-95, -5]
        Direction     left
        Index         "2"
      }
      Schematic {
        Location      [690, 446; 1182, 1093]
        ZoomFactor    1
        SliderPosition [0, 0]
        ShowBrowser   off
        BrowserWidth  100
        Component {
          Type          Delay
          Name          "Delay1"
          Show          off
          Position      [105, 100]
          Direction     right
          Flipped       off
          Parameter {
            Variable      "N"
            Value         "1"
            Show          off
          }
          Parameter {
            Variable      "X0"
            Value         "0"
            Show          off
          }
          Parameter {
            Variable      "Ts"
            Value         "floor(0.5/Ts_controller)*Ts_controller"
            Show          off
          }
        }
        Component {
          Type          LogicalOperator
          Name          "Logical\nOperator1"
          Show          off
          Position      [155, 100]
          Direction     up
          Flipped       off
          Parameter {
            Variable      "Operator"
            Value         "6"
            Show          off
          }
          Parameter {
            Variable      "Inputs"
            Value         "1"
            Show          off
          }
        }
        Component {
          Type          CScript
          Name          "C-Script"
          Show          on
          Position      [250, 65]
          Direction     up
          Flipped       off
          Parameter {
            Variable      "NumInputs"
            Value         "1"
            Show          off
          }
          Parameter {
            Variable      "NumOutputs"
            Value         "1"
            Show          off
          }
          Parameter {
            Variable      "NumContStates"
            Value         "0"
            Show          off
          }
          Parameter {
            Variable      "NumDiscStates"
            Value         "0"
            Show          off
          }
          Parameter {
            Variable      "NumZCSignals"
            Value         "0"
            Show          off
          }
          Parameter {
            Variable      "DirectFeedthrough"
            Value         "1"
            Show          off
          }
          Parameter {
            Variable      "Ts"
            Value         "1e-3"
            Show          off
          }
          Parameter {
            Variable      "Parameters"
            Value         ""
            Show          off
          }
          Parameter {
            Variable      "LangStandard"
            Value         "2"
            Show          off
          }
          Parameter {
            Variable      "GnuExtensions"
            Value         "2"
            Show          off
          }
          Parameter {
            Variable      "RuntimeCheck"
            Value         "2"
            Show          off
          }
          Parameter {
            Variable      "Declarations"
            Value         ""
            Show          off
          }
          Parameter {
            Variable      "StartFcn"
            Value         ""
            Show          off
          }
          Parameter {
            Variable      "OutputFcn"
            Value         "Output(0)=Input(0);"
            Show          off
          }
          Parameter {
            Variable      "UpdateFcn"
            Value         ""
            Show          off
          }
          Parameter {
            Variable      "DerivativeFcn"
            Value         ""
            Show          off
          }
          Parameter {
            Variable      "TerminateFcn"
            Value         ""
            Show          off
          }
        }
        Component {
          Type          TargetCode
          Name          "Digital Out (LED)"
          Show          on
          Position      [330, 65]
          Direction     up
          Flipped       off
          Frame         [-25, -20; 25, 20]
          LabelPosition [0, 23]
          LabelAlign    up
          TargetPortIndices "1"
          CodeFcnLang   "2"          CodeFcn       "local Require = {}\nlocal "
"InitCode = {}\nlocal OutputCode = {}\n\nfor i = 1, #Block.InputSignal[1] do\n"
"  local instance = Target.Coder.RegisterDigitalOutBlock()\n  local gpio = Blo"
"ck.Mask.gpio[i]\n\n  local error = Target.Coder.RequireGpio(gpio);\n  if(erro"
"r ~= nil) then\n  \t\treturn  string.format(\"Unable to register GPIO%i: %s\""
", gpio, error)\n  end\n  \n  \n  table.insert(InitCode, string.format(\"HAL_s"
"etupDigitalOut(%i, %i, false);\", instance, gpio))\n  table.insert(OutputCode"
", string.format(\"HAL_setDigitalOut(%i, %s);\", instance, Block.InputSignal[1"
"][i]))\nend\n\nreturn {\n  Require = Require,\n  Include = \"hal.h\",\n  Init"
"Code = InitCode,\n  OutputCode = OutputCode,\n}"
          MaskType      "Digital Out"
          MaskDisplay   "text(['Digital' char(10) 'Out'])"
          MaskIconFrame on
          MaskIconOpaque off
          MaskIconRotates on
          MaskInit      "if ~isreal(gpio) || ~isvector(gpio) ...\n   || any(fl"
"oor(gpio) ~= gpio) || any(gpio < 0),\n  error('\"Digital output GPIO resource"
"s(s)\" must be a scalar or vector of positive or zero integers.')\nend\n"
          Parameter {
            Variable      "gpio"
            Prompt        "Digital output GPIO resource(s)"
            Type          FreeText
            Value         "[34]"
            Show          on
            Tunable       off
            TabName       ""
          }
          Terminal {
            Type          Input
            Position      [-25, 0]
            Direction     left
          }
          Schematic {
            Location      [1449, 864; 2517, 1044]
            ZoomFactor    1
            SliderPosition [0, 0]
            ShowBrowser   off
            BrowserWidth  100
            Component {
              Type          TargetOutput
              Name          "1"
              Show          on
              Position      [260, 75]
              Direction     right
              Flipped       off
              Parameter {
                Variable      "Width"
                Value         "numel(gpio)"
                Show          off
              }
            }
            Component {
              Type          Input
              Name          "In1"
              Show          off
              Position      [120, 75]
              Direction     right
              Flipped       off
              Parameter {
                Variable      "Index"
                Value         "1"
                Show          on
              }
              Parameter {
                Variable      "Width"
                Value         "numel(gpio)"
                Show          off
              }
            }
            Connection {
              Type          Signal
              SrcComponent  "In1"
              SrcTerminal   1
              DstComponent  "1"
              DstTerminal   1
            }
          }
        }
        Component {
          Type          TargetCode
          Name          "Digital Out (LED)1"
          Show          on
          Position      [405, 235]
          Direction     up
          Flipped       off
          Frame         [-25, -20; 25, 20]
          LabelPosition [0, 23]
          LabelAlign    up
          TargetPortIndices "2"
          CodeFcnLang   "2"          CodeFcn       "local Require = {}\nlocal "
"InitCode = {}\nlocal OutputCode = {}\n\nfor i = 1, #Block.InputSignal[1] do\n"
"  local instance = Target.Coder.RegisterDigitalOutBlock()\n  local gpio = Blo"
"ck.Mask.gpio[i]\n\n  local error = Target.Coder.RequireGpio(gpio);\n  if(erro"
"r ~= nil) then\n  \t\treturn  string.format(\"Unable to register GPIO%i: %s\""
", gpio, error)\n  end\n  \n  \n  table.insert(InitCode, string.format(\"HAL_s"
"etupDigitalOut(%i, %i, false);\", instance, gpio))\n  table.insert(OutputCode"
", string.format(\"HAL_setDigitalOut(%i, %s);\", instance, Block.InputSignal[1"
"][i]))\nend\n\nreturn {\n  Require = Require,\n  Include = \"hal.h\",\n  Init"
"Code = InitCode,\n  OutputCode = OutputCode,\n}"
          MaskType      "Digital Out"
          MaskDisplay   "text(['Digital' char(10) 'Out'])"
          MaskIconFrame on
          MaskIconOpaque off
          MaskIconRotates on
          MaskInit      "if ~isreal(gpio) || ~isvector(gpio) ...\n   || any(fl"
"oor(gpio) ~= gpio) || any(gpio < 0),\n  error('\"Digital output GPIO resource"
"s(s)\" must be a scalar or vector of positive or zero integers.')\nend\n"
          Parameter {
            Variable      "gpio"
            Prompt        "Digital output GPIO resource(s)"
            Type          FreeText
            Value         "[35 36]"
            Show          on
            Tunable       off
            TabName       ""
          }
          Terminal {
            Type          Input
            Position      [-25, 0]
            Direction     left
          }
          Schematic {
            Location      [1326, 236; 2457, 416]
            ZoomFactor    1
            SliderPosition [0, 0]
            ShowBrowser   off
            BrowserWidth  100
            Component {
              Type          TargetOutput
              Name          "1"
              Show          on
              Position      [260, 75]
              Direction     right
              Flipped       off
              Parameter {
                Variable      "Width"
                Value         "numel(gpio)"
                Show          off
              }
            }
            Component {
              Type          Input
              Name          "In1"
              Show          off
              Position      [120, 75]
              Direction     right
              Flipped       off
              Parameter {
                Variable      "Index"
                Value         "1"
                Show          on
              }
              Parameter {
                Variable      "Width"
                Value         "numel(gpio)"
                Show          off
              }
            }
            Connection {
              Type          Signal
              SrcComponent  "In1"
              SrcTerminal   1
              DstComponent  "1"
              DstTerminal   1
            }
          }
        }
        Component {
          Type          TargetCode
          Name          "Digital In1"
          Show          off
          Position      [105, 235]
          Direction     up
          Flipped       off
          Frame         [-25, -20; 25, 20]
          LabelPosition [0, 23]
          LabelAlign    up
          TargetPortIndices "3"
          CodeFcnLang   "2"          CodeFcn       "local Require = {}\nlocal "
"InitCode = {}\nlocal OutputSignal = {}\n\nfor i = 1, Block.NumOutputSignals[1"
"] do\n  local instance = Target.Coder.RegisterDigitalInBlock()\n  local gpio "
"= Block.Mask.gpio[i]\n\n  local error = Target.Coder.RequireGpio(gpio);\n  if"
"(error ~= nil) then\n  \t\treturn  string.format(\"Unable to register GPIO%i:"
" %s\", gpio, error)\n  end\n  \n  table.insert(InitCode, string.format(\"HAL_"
"setupDigitalIn(%i, %i);\", instance, gpio))\n  table.insert(OutputSignal, str"
"ing.format(\"HAL_getDigitalIn(%i)\", instance))   \nend\n\nreturn {\n  Requir"
"e = Require,\n  Include = \"hal.h\",\n  InitCode = InitCode,\n  OutputSignal "
"= { OutputSignal },\n}\n"
          MaskType      "Digital In"
          MaskDescription "Reads a digital input.\n\nThe output signal is 1 if"
" the input voltage is higher than 2 Volts and 0 if it is lower than 0.8 Volts"
". \nFor other input voltages the output signal is undefined."
          MaskHelp      "di_rtbox.html"
          MaskDisplay   "text(['Digital' char(10) 'In'])"
          MaskIconFrame on
          MaskIconOpaque off
          MaskIconRotates on
          MaskInit      "if ~isreal(gpio) || ~isvector(gpio) ...\n   || any(fl"
"oor(gpio) ~= gpio) || any(gpio < 0),\n  error('\"Digital output GPIO resource"
"s(s)\" must be a scalar or vector of positive or zero integers.')\nend"
          Parameter {
            Variable      "gpio"
            Prompt        "Digital input GPIO resource(s)"
            Type          FreeText
            Value         "[13 14]"
            Show          on
            Tunable       off
            TabName       ""
          }
          Terminal {
            Type          Output
            Position      [29, 0]
            Direction     right
          }
          Schematic {
            Location      [891, 90; 1763, 270]
            ZoomFactor    1
            SliderPosition [0, 0]
            ShowBrowser   off
            BrowserWidth  100
            Component {
              Type          TargetInput
              Name          "1"
              Show          on
              Position      [120, 75]
              Direction     right
              Flipped       off
              Parameter {
                Variable      "Width"
                Value         "numel(gpio)"
                Show          off
              }
            }
            Component {
              Type          Output
              Name          "Out1"
              Show          off
              Position      [260, 75]
              Direction     right
              Flipped       off
              Parameter {
                Variable      "Index"
                Value         "1"
                Show          on
              }
              Parameter {
                Variable      "DataType"
                Value         "9"
                Show          off
              }
              Parameter {
                Variable      "Width"
                Value         "numel(gpio)"
                Show          off
              }
            }
            Connection {
              Type          Signal
              SrcComponent  "1"
              SrcTerminal   1
              DstComponent  "Out1"
              DstTerminal   1
            }
          }
        }
        Component {
          Type          TargetCode
          Name          "PWM Out (ePWM0)"
          Show          on
          Position      [405, 340]
          Direction     up
          Flipped       off
          Frame         [-25, -20; 25, 20]
          LabelPosition [0, 23]
          LabelAlign    up
          TargetPortIndices "4"
          CodeFcnLang   "2"          CodeFcn       "local Require = {}\nlocal "
"InitCode = {}\nlocal OutputCode = {}\n\nfor i = 1, #Block.InputSignal[1] do\n"
"  local pwm = Block.Mask.pwm[i]\n  \n  local prd\n  if #Block.Mask.prd == 1 t"
"hen\n    prd = Block.Mask.prd[1]\n  elseif #Block.Mask.prd == #Block.InputSig"
"nal[1] then\n  \t prd = Block.Mask.prd[i]\n  else\n    return \"Invalid width"
" of parameter 'prd'.\" \t\n  end  \n  \n  local dt\n  if #Block.Mask.dt == 1 "
"then\n    dt = Block.Mask.dt[1]\n  elseif #Block.Mask.dt == #Block.InputSigna"
"l[1] then\n  \t dt = Block.Mask.dt[i]\n  else\n  \t return \"Invalid width of"
" parameter 'dt'.\"\n  end    \n    \n  local pwmParams = {period = prd, dt = "
"dt}\n  \n  local instance, error = Target.Coder.RegisterPwmOutBlock(pwm, pwmP"
"arams)\n  if(instance == nil) then\n  \t return string.format(\"Unable to reg"
"ister PWM%i: %s\", pwm, error)\n  end\n  \n  table.insert(InitCode, string.fo"
"rmat(\"{\"))  \n  table.insert(InitCode, string.format(\"  PWM_Params_t *para"
"ms = HAL_getDefaultPwmParams(%i, %i);\", prd, dt))\n  table.insert(InitCode, "
"string.format(\"  HAL_setupPwmOut(%i, %i, params);\", instance, pwm))  \n  ta"
"ble.insert(InitCode, string.format(\"}\"))\n     \n  table.insert(OutputCode,"
" string.format(\"HAL_setPwmOutF(%i, %s);\", instance, Block.InputSignal[1][i]"
"))\nend\n\nreturn {\n  Require = Require,\n  Include = \"hal.h\",\n  InitCode"
" = InitCode,\n  OutputCode = OutputCode,\n}\n\n"
          MaskType      "PWM Out"
          MaskDescription "Generate a configurable PWM signal on a digital out"
"put."
          MaskHelp      "pwmout_rtbox.html"
          MaskDisplay   "text(['PWM' char(10) 'Out'])"
          MaskIconFrame on
          MaskIconOpaque off
          MaskIconRotates on
          MaskInit      "if ~isreal(pwm) || ~isvector(pwm) ...\n   || any(floo"
"r(pwm) ~= pwm) || any(pwm < 0),\n  error('\"PWM resource(s)\" must be a scala"
"r or vector of positive or zero integers.')\nend"
          Parameter {
            Variable      "pwm"
            Prompt        "PWM resources(s)"
            Type          FreeText
            Value         "[1 2]"
            Show          on
            Tunable       off
            TabName       ""
          }
          Parameter {
            Variable      "prd"
            Prompt        "Period (counts)"
            Type          FreeText
            Value         "2250"
            Show          on
            Tunable       off
            TabName       ""
          }
          Parameter {
            Variable      "dt"
            Prompt        "Deadtime (counts)"
            Type          FreeText
            Value         "50"
            Show          on
            Tunable       off
            TabName       ""
          }
          Terminal {
            Type          Input
            Position      [-25, 0]
            Direction     left
          }
          Schematic {
            Location      [1202, 344; 2342, 922]
            ZoomFactor    1
            SliderPosition [0, 0]
            ShowBrowser   off
            BrowserWidth  100
            Component {
              Type          TargetOutput
              Name          "1"
              Show          on
              Position      [260, 80]
              Direction     right
              Flipped       off
              Parameter {
                Variable      "Width"
                Value         "numel(pwm)"
                Show          off
              }
            }
            Component {
              Type          Input
              Name          "In1"
              Show          off
              Position      [60, 80]
              Direction     right
              Flipped       off
              Parameter {
                Variable      "Index"
                Value         "1"
                Show          on
              }
              Parameter {
                Variable      "Width"
                Value         "numel(pwm)"
                Show          off
              }
            }
            Connection {
              Type          Signal
              SrcComponent  "In1"
              SrcTerminal   1
              DstComponent  "1"
              DstTerminal   1
            }
          }
        }
        Component {
          Type          Constant
          Name          "Constant"
          Show          on
          Position      [310, 340]
          Direction     right
          Flipped       off
          Frame         [-10, -10; 10, 10]
          LabelPosition [0, 13]
          LabelAlign    up
          Parameter {
            Variable      "Value"
            Value         "[0.5 0.1]"
            Show          on
          }
          Parameter {
            Variable      "DataType"
            Value         "9"
            Show          off
          }
        }
        Component {
          Type          TargetCode
          Name          "Analog In (ADC0)"
          Show          off
          Position      [100, 335]
          Direction     up
          Flipped       off
          Frame         [-25, -20; 25, 20]
          LabelPosition [0, 23]
          LabelAlign    up
          TargetPortIndices "5"
          CodeFcnLang   "2"          CodeFcn       "local Require = {}\nlocal "
"InitCode = {}\nlocal OutputSignal = {}\n\nlocal adc = Block.Mask.adc[1]\n\nlo"
"cal adcParams = {}\n  \nlocal instance, error = Target.Coder.RegisterAdcBlock"
"(adc, pwmParams)\nif(instance == nil) then\n\treturn string.format(\"Unable t"
"o register ADC%i: %s\", adc, error)\nend\n\ntable.insert(InitCode, string.for"
"mat(\"{\"))  \ntable.insert(InitCode, string.format(\"  AIN_AdcParams_t *para"
"msAdc = HAL_getDefaultAdcParams();\"))\ntable.insert(InitCode, string.format("
"\"  HAL_setupAdc(%i, %i, paramsAdc);\", instance, adc))  \ntable.insert(InitC"
"ode, string.format(\"}\"))\n  \nif #Block.Mask.soc ~= #Block.Mask.input then"
"\n\treturn \"'soc' and 'input' must have same width.\"\nend\n  \nfor i = 1, B"
"lock.NumOutputSignals[1] do\n   local soc = Block.Mask.soc[i]\n   local input"
" = Block.Mask.input[i]\n   \n   local ACQPS\n   if #Block.Mask.ACQPS == 1 the"
"n\n   \tACQPS = Block.Mask.ACQPS[1]\n  \telseif #Block.Mask.ACQPS == #Block.I"
"nputSignal[1] then\n  \t \tACQPS = Block.Mask.ACQPS[i]\n  \telse\n    \tretur"
"n \"Invalid width of parameter 'ACQPS'.\" \t\n  \tend  \n  \t\n  \tlocal scal"
"e\n   if #Block.Mask.scale == 1 then\n   \tscale = Block.Mask.scale[1]\n  \te"
"lseif #Block.Mask.scale == #Block.InputSignal[1] then\n  \t \tscale = Block.M"
"ask.scale[i]\n  \telse\n    \treturn \"Invalid width of parameter 'scale'.\" "
"\t\n  \tend  \n  \t\n  \tlocal offset\n   if #Block.Mask.offset == 1 then\n  "
" \toffset = Block.Mask.offset[1]\n  \telseif #Block.Mask.offset == #Block.Inp"
"utSignal[1] then\n  \t \toffset = Block.Mask.offset[i]\n  \telse\n    \tretur"
"n \"Invalid width of parameter 'offset'.\" \t\n  \tend  \n   \n  \tlocal TRIG"
"SEL\n   if #Block.Mask.TRIGSEL == 1 then\n   \tTRIGSEL = Block.Mask.TRIGSEL[1"
"]\n  \telseif #Block.Mask.TRIGSEL == #Block.InputSignal[1] then\n  \t \tTRIGS"
"EL = Block.Mask.TRIGSEL[i]\n  \telse\n    \treturn \"Invalid width of paramet"
"er 'TRIGSEL'.\" \t\n  \tend     \n   \n\n--[[  \n  local prd\n  if #Block.Mas"
"k.prd == 1 then\n    prd = Block.Mask.prd[1]\n  elseif #Block.Mask.prd == #Bl"
"ock.InputSignal[1] then\n  \t prd = Block.Mask.prd[i]\n  else\n    return \"I"
"nvalid width of parameter 'prd'.\" \t\n  end  \n  \n  local dt\n  if #Block.M"
"ask.dt == 1 then\n    dt = Block.Mask.dt[1]\n  elseif #Block.Mask.dt == #Bloc"
"k.InputSignal[1] then\n  \t dt = Block.Mask.dt[i]\n  else\n  \t return \"Inva"
"lid width of parameter 'dt'.\"\n  end    \n    \n  local pwmParams = {period "
"= prd, dt = dt}\n  \n  local instance, error = Target.Coder.RegisterPwmOutBlo"
"ck(pwm, pwmParams)\n  if(instance == nil) then\n  \t return string.format(\"U"
"nable to register PWM%i: %s\", pwm, error)\n  end\n--]]\n  \n  table.insert(I"
"nitCode, string.format(\"{\"))  \n  table.insert(InitCode, string.format(\"  "
"AIN_ChannelParams_t *paramsChannel = HAL_getDefaultAinChannelParams();\"))\n "
" table.insert(InitCode, string.format(\"  paramsChannel->ADCSOCxCTL.bit.TRIGS"
"EL = %i;\", TRIGSEL))  \n  table.insert(InitCode, string.format(\"  HAL_setup"
"AnalogInF(%i, %i, %i, paramsChannel, %.9ef, %.9ef);\", instance, soc, input, "
"scale, offset)) \n  table.insert(InitCode, string.format(\"}\"))\n     \n  ta"
"ble.insert(OutputSignal, string.format(\"HAL_getAnalogInF(%i, %i);\", instanc"
"e, soc))   \nend\n\nreturn {\n  Require = Require,\n  Include = \"hal.h\",\n "
" InitCode = InitCode,\n  OutputSignal = { OutputSignal },\n}\n\n"
          MaskType      "Analog In"
          MaskDescription "Output the measured voltage at an analog input chan"
"nel.\n\nThe output signal is calculated as input*Scale+Offset, where input is"
" the input voltage in Volts."
          MaskHelp      "ai_rtbox.html"
          MaskDisplay   "text(['Analog' char(10) 'In'])"
          MaskIconFrame on
          MaskIconOpaque off
          MaskIconRotates on
          Parameter {
            Variable      "adc"
            Prompt        "ADC"
            Type          FreeText
            Value         "0"
            Show          on
            Tunable       off
            TabName       ""
          }
          Parameter {
            Variable      "soc"
            Prompt        "Analog conversion(s) (SOC)"
            Type          FreeText
            Value         "[0 0]"
            Show          on
            Tunable       off
            TabName       ""
          }
          Parameter {
            Variable      "input"
            Prompt        "Analog input channel"
            Type          FreeText
            Value         "[0 0]"
            Show          on
            Tunable       off
            TabName       ""
          }
          Parameter {
            Variable      "ACQPS"
            Prompt        "Sampling time (ACQPS)"
            Type          FreeText
            Value         "6"
            Show          off
            Tunable       off
            TabName       ""
          }
          Parameter {
            Variable      "scale"
            Prompt        "Scale"
            Type          FreeText
            Value         "1"
            Show          off
            Tunable       off
            TabName       ""
          }
          Parameter {
            Variable      "offset"
            Prompt        "Offset"
            Type          FreeText
            Value         "0"
            Show          off
            Tunable       off
            TabName       ""
          }
          Parameter {
            Variable      "TRIGSEL"
            Prompt        "TRIGSEL"
            Type          FreeText
            Value         "5+2*(1-1)"
            Show          on
            Tunable       off
            TabName       ""
          }
          Terminal {
            Type          Output
            Position      [29, 0]
            Direction     right
          }
          Schematic {
            Location      [1093, 151; 1932, 401]
            ZoomFactor    1
            SliderPosition [0, 0]
            ShowBrowser   off
            BrowserWidth  100
            Component {
              Type          TargetInput
              Name          "1"
              Show          on
              Position      [120, 75]
              Direction     right
              Flipped       off
              Parameter {
                Variable      "Width"
                Value         "numel(soc)"
                Show          off
              }
            }
            Component {
              Type          Output
              Name          "Out1"
              Show          off
              Position      [260, 75]
              Direction     right
              Flipped       off
              Parameter {
                Variable      "Index"
                Value         "1"
                Show          on
              }
              Parameter {
                Variable      "DataType"
                Value         "9"
                Show          off
              }
              Parameter {
                Variable      "Width"
                Value         "numel(soc)"
                Show          off
              }
            }
            Connection {
              Type          Signal
              SrcComponent  "1"
              SrcTerminal   1
              DstComponent  "Out1"
              DstTerminal   1
            }
          }
        }
        Component {
          Type          Display
          Name          "Display"
          Show          on
          Position      [185, 335]
          Direction     up
          Flipped       off
          Frame         [-31, -11; 31, 11]
          LabelPosition [0, 14]
          LabelAlign    up
          Parameter {
            Variable      "Notation"
            Value         "1"
            Show          off
          }
          Parameter {
            Variable      "Precision"
            Value         "4"
            Show          off
          }
        }
        Connection {
          Type          Signal
          SrcComponent  "Delay1"
          SrcTerminal   2
          DstComponent  "Logical\nOperator1"
          DstTerminal   2
        }
        Connection {
          Type          Signal
          SrcComponent  "C-Script"
          SrcTerminal   2
          DstComponent  "Digital Out (LED)"
          DstTerminal   1
        }
        Connection {
          Type          Signal
          SrcComponent  "Logical\nOperator1"
          SrcTerminal   1
          Points        [190, 100; 190, 65]
          Branch {
            Points        [65, 65; 65, 100]
            DstComponent  "Delay1"
            DstTerminal   1
          }
          Branch {
            DstComponent  "C-Script"
            DstTerminal   1
          }
        }
        Connection {
          Type          Signal
          SrcComponent  "Digital In1"
          SrcTerminal   1
          DstComponent  "Digital Out (LED)1"
          DstTerminal   1
        }
        Connection {
          Type          Signal
          SrcComponent  "Constant"
          SrcTerminal   1
          DstComponent  "PWM Out (ePWM0)"
          DstTerminal   1
        }
        Connection {
          Type          Signal
          SrcComponent  "Analog In (ADC0)"
          SrcTerminal   1
          DstComponent  "Display"
          DstTerminal   1
        }
        Annotation {
          Name          "Blinking on Launchpad"
          Position      [100, 45]
        } 
      }
    }
  }
}
DemoSignature "4k314Al0eMCQYlyGqM3Mwmc9/zw995xTr7zl/dC7k+w="
