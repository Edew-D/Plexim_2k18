Plecs {
  Name          "Target28069-Blink"
  Version       "4.2"
  CircuitModel  "ContStateSpace"
  StartTime     "0.0"
  StopTime      "1.0"
  Timeout       ""
  Solver        "dopri"
  MaxStep       "1e-3"
  InitStep      "-1"
  FixedStep     "1e-3"
  Refine        "1"
  ZCStepSize    "1e-9"
  RelTol        "1e-3"
  AbsTol        "-1"
  TurnOnThreshold "0"
  SyncFixedStepTasks "2"
  UseSingleCommonBaseRate "2"
  LossVariableLimitExceededMsg "3"
  NegativeSwitchLossMsg "3"
  DivisionByZeroMsg "3"
  StiffnessDetectionMsg "2"
  MaxConsecutiveZCs "1000"
  AlgebraicLoopWithStateMachineMsg "2"
  AssertionAction "1"
  InitializationCommands "Ts_plant = 5e-6;\nTs_controller = 100e-6;"
  InitialState  "1"
  SystemState   ""
  CodeGenParameterInlining "2"
  CodeGenInliningExceptions "AAAACwAAAAAA"
  CodeGenFloatingPointFormat "2"
  CodeGenIntegerWordSize "32"
  CodeGenAbsTimeUsageMsg "3"
  CodeGenBaseName ""
  CodeGenOutputDir ""
  CodeGenExtraOpts ""
  CodeGenTarget "Generic"
  CodeGenTargetSettings ""
  ExtendedMatrixPrecision "1"
  MatrixSignificanceCheck "2"
  EnableStateSpaceSplitting "2"
  DisplayStateSpaceSplitting "1"
  DiscretizationMethod "2"
  ExternalModeSettings "AAAAfwAAAAAWUU1hcDxRU3RyaW5nLFFTdHJpbmc+AAAAAAYAAAAYAF"
"QAcgBpAGcAZwBlAHIAVgBhAGwAdQBlAAAAAgAwAAAAGABUAHIAaQBnAGcAZQByAEQAZQBsAGEAeQA"
"AAAIAMAAAABYAUwBlAG4AcwBpAHQAaQB2AGkAdAB5AAAAAgAwAAAAFgBSAGUAZgByAGUAcwBoAFIA"
"YQB0AGUAAAAEADIAMAAAABQATgB1AG0AUwBhAG0AcABsAGUAcwAAAAgAOAAxADkAMgAAABQARABlA"
"GMAaQBtAGEAdABpAG8AbgAAAAIAMQ=="
  AlgebraicLoopMethod "1"
  AlgebraicLoopTolerance "1e-6"
  Schematic {
    Location      [902, 477; 1244, 664]
    ZoomFactor    1
    SliderPosition [0, 0]
    ShowBrowser   off
    BrowserWidth  100
    Component {
      Type          Subsystem
      Name          "Controls"
      Show          on
      Position      [175, 75]
      Direction     up
      Flipped       off
      Frame         [-95, -25; 95, 25]
      LabelPosition [0, 28]
      LabelAlign    up
      TreatAsAtomicUnit on
      SampleTime    "-1"
      CodeGenEnable on
      CodeGenSampleTime "Ts_controller"
      CodeGenTarget "TI28069"
      CodeGenTargetSettings "AAAAfwAAAAAWUU1hcDxRU3RyaW5nLFFTdHJpbmc+AAAAAAYAA"
"AASAHUAcwBlAEkAbgB0AE8AcwBjAAAAAgAxAAAAEAB0AGkAbQBlAEIAYQBzAGUAAAACADIAAAAOAH"
"QAYQBzAGsAMgBIAHoAAAAGADEAMAAwAAAAEABzAHkAcwBDAGwAawBIAHoAAAAQADkAMAAwADAAMAA"
"wADAAMAAAABAAZQB4AHQAQwBsAGsASAB6AAAAEAAyADAAMAAwADAAMAAwADAAAAAgAGQATwB1AHQA"
"UABzAEUAbgBhAGIAbABlAEcAUABJAE8AAAAEADIANw=="
      ExternalModeSettings "AAAAfwAAAAAWUU1hcDxRU3RyaW5nLFFTdHJpbmc+AAAAAAYAAA"
"AYAFQAcgBpAGcAZwBlAHIAVgBhAGwAdQBlAAAAAgAwAAAAGABUAHIAaQBnAGcAZQByAEQAZQBsAGE"
"AeQAAAAIAMAAAABYAUwBlAG4AcwBpAHQAaQB2AGkAdAB5AAAAAgAwAAAAFgBSAGUAZgByAGUAcwBo"
"AFIAYQB0AGUAAAAEADIAMAAAABQATgB1AG0AUwBhAG0AcABsAGUAcwAAAAgAOAAxADkAMgAAABQAR"
"ABlAGMAaQBtAGEAdABpAG8AbgAAAAIAMQ=="
      MaskIconFrame on
      MaskIconOpaque off
      MaskIconRotates on
      Terminal {
        Type          Output
        Position      [99, -15]
        Direction     right
        Index         "1"
      }
      Terminal {
        Type          Output
        Position      [99, -5]
        Direction     right
        Index         "2"
      }
      Terminal {
        Type          Input
        Position      [-95, -15]
        Direction     left
        Index         "1"
      }
      Terminal {
        Type          Output
        Position      [99, 5]
        Direction     right
        Index         "3"
      }
      Schematic {
        Location      [858, 52; 1280, 415]
        ZoomFactor    1
        SliderPosition [0, 0]
        ShowBrowser   off
        BrowserWidth  100
        Component {
          Type          Delay
          Name          "Delay1"
          Show          off
          Position      [105, 100]
          Direction     right
          Flipped       off
          Parameter {
            Variable      "N"
            Value         "1"
            Show          off
          }
          Parameter {
            Variable      "X0"
            Value         "0"
            Show          off
          }
          Parameter {
            Variable      "Ts"
            Value         "floor(0.5/Ts_controller)*Ts_controller"
            Show          off
          }
        }
        Component {
          Type          LogicalOperator
          Name          "Logical\nOperator1"
          Show          off
          Position      [155, 100]
          Direction     up
          Flipped       off
          Parameter {
            Variable      "Operator"
            Value         "6"
            Show          off
          }
          Parameter {
            Variable      "Inputs"
            Value         "1"
            Show          off
          }
        }
        Component {
          Type          CScript
          Name          "C-Script"
          Show          on
          Position      [250, 65]
          Direction     up
          Flipped       off
          Parameter {
            Variable      "NumInputs"
            Value         "1"
            Show          off
          }
          Parameter {
            Variable      "NumOutputs"
            Value         "1"
            Show          off
          }
          Parameter {
            Variable      "NumContStates"
            Value         "0"
            Show          off
          }
          Parameter {
            Variable      "NumDiscStates"
            Value         "0"
            Show          off
          }
          Parameter {
            Variable      "NumZCSignals"
            Value         "0"
            Show          off
          }
          Parameter {
            Variable      "DirectFeedthrough"
            Value         "1"
            Show          off
          }
          Parameter {
            Variable      "Ts"
            Value         "1e-3"
            Show          off
          }
          Parameter {
            Variable      "Parameters"
            Value         ""
            Show          off
          }
          Parameter {
            Variable      "LangStandard"
            Value         "2"
            Show          off
          }
          Parameter {
            Variable      "GnuExtensions"
            Value         "2"
            Show          off
          }
          Parameter {
            Variable      "RuntimeCheck"
            Value         "2"
            Show          off
          }
          Parameter {
            Variable      "Declarations"
            Value         ""
            Show          off
          }
          Parameter {
            Variable      "StartFcn"
            Value         ""
            Show          off
          }
          Parameter {
            Variable      "OutputFcn"
            Value         "Output(0)=Input(0);"
            Show          off
          }
          Parameter {
            Variable      "UpdateFcn"
            Value         ""
            Show          off
          }
          Parameter {
            Variable      "DerivativeFcn"
            Value         ""
            Show          off
          }
          Parameter {
            Variable      "TerminateFcn"
            Value         ""
            Show          off
          }
        }
        Component {
          Type          TargetCode
          Name          "Digital Out (LED)"
          Show          on
          Position      [330, 65]
          Direction     up
          Flipped       off
          Frame         [-25, -20; 25, 20]
          LabelPosition [0, 23]
          LabelAlign    up
          TargetPortIndices "1"
          CodeFcnLang   "1"          CodeFcn       "Include(\"hal.h\");\n\nfor"
" (int i = 0; i < NumInputSignals(0); ++i)\n{\n   int channel = MaskRealData(M"
"ASK_VAR_channel, i);\n   int gpio = MaskRealData(MASK_VAR_gpio, i);   \n   \n"
"   //Require(\"Digital output\", channel);  \n   \n\tPrint(InitCode, \"//>tab"
"le.insert(doutUsed, %i)<//\\n\", gpio);      \n   \n   Print(InitCode, \"HAL_"
"setupDigitalOut(%i, %i, false);\\n\", channel, gpio);       \n   Print(Output"
"Code, \"HAL_setDigitalOut(%i, %s);\\n\", channel, InputSignal(0, i));\n}\n"
          MaskType      "Digital Out"
          MaskDisplay   "text(['Digital' char(10) 'Out'])"
          MaskIconFrame on
          MaskIconOpaque off
          MaskIconRotates on
          MaskInit      "if ~isreal(channel) || ~isvector(channel) ...\n   || "
"any(floor(channel) ~= channel) || any(channel < 0),\n  error('\"Digital outpu"
"t channel(s)\" must be a scalar or vector of positive or zero integers.')\nen"
"d\n\nif ~isreal(gpio) || ~isvector(gpio) ...\n   || any(floor(gpio) ~= gpio) "
"|| any(gpio < 0),\n  error('\"Digital output GPIO resources(s)\" must be a sc"
"alar or vector of positive or zero integers.')\nend\n"
          Parameter {
            Variable      "channel"
            Prompt        "Digital output channel(s)"
            Type          FreeText
            Value         "0"
            Show          on
            Tunable       off
            TabName       ""
          }
          Parameter {
            Variable      "gpio"
            Prompt        "Digital output GPIO resource(s)"
            Type          FreeText
            Value         "34"
            Show          on
            Tunable       off
            TabName       ""
          }
          Terminal {
            Type          Input
            Position      [-25, 0]
            Direction     left
          }
          Schematic {
            Location      [1213, 459; 1960, 639]
            ZoomFactor    1
            SliderPosition [0, 0]
            ShowBrowser   off
            BrowserWidth  100
            Component {
              Type          TargetOutput
              Name          "1"
              Show          on
              Position      [260, 75]
              Direction     right
              Flipped       off
              Parameter {
                Variable      "Width"
                Value         "numel(channel)"
                Show          off
              }
            }
            Component {
              Type          Input
              Name          "In1"
              Show          off
              Position      [120, 75]
              Direction     right
              Flipped       off
              Parameter {
                Variable      "Index"
                Value         "1"
                Show          on
              }
              Parameter {
                Variable      "Width"
                Value         "numel(channel)"
                Show          off
              }
            }
            Connection {
              Type          Signal
              SrcComponent  "In1"
              SrcTerminal   1
              DstComponent  "1"
              DstTerminal   1
            }
          }
        }
        Component {
          Type          TargetCode
          Name          "PWM Out (ePWM0)"
          Show          on
          Position      [330, 250]
          Direction     up
          Flipped       off
          Frame         [-25, -20; 25, 20]
          LabelPosition [0, 23]
          LabelAlign    up
          TargetPortIndices "2"
          CodeFcnLang   "1"          CodeFcn       "Include(\"hal.h\");\nInclu"
"de(\"power.h\");\n\nfor (int i = 0; i < NumInputSignals(0); ++i)\n{\n   int c"
"hannel = MaskRealData(MASK_VAR_channel, i);\n   int pwm = MaskRealData(MASK_V"
"AR_pwm, i);\n   int prd = MaskRealData(MASK_VAR_prd, i);\n   int dt = MaskRea"
"lData(MASK_VAR_dt, i);\n  \n   //Require(\"PWM output\", channel);\n   \n\tPr"
"int(InitCode, \"//>table.insert(pwmUsed, %i)<//\\n\", pwm);      \n\n   Print"
"(InitCode, \"{\\n\");\n   Print(InitCode, \"    PWM_Params_t *params = HAL_ge"
"tDefaultPwmParams(%i, %i);\\n\", prd, dt);\n   Print(InitCode, \"    HAL_setu"
"pPwmOut(%i, %i, params);\\n\", channel, pwm);   \n   Print(InitCode, \"}\\n\""
");\n   Print(OutputCode, \"HAL_setPwmOutF(%i, %s);\\n\", channel, InputSignal"
"(0, i));\n}\nPrint(OutputCode, \"PWR_enableSwitching();\\n\");\n"
          MaskType      "PWM Out"
          MaskDescription "Generate a configurable PWM signal on a digital out"
"put."
          MaskHelp      "pwmout_rtbox.html"
          MaskDisplay   "text(['PWM' char(10) 'Out'])"
          MaskIconFrame on
          MaskIconOpaque off
          MaskIconRotates on
          MaskInit      "if ~isreal(channel) || ~isvector(channel) ...\n   || "
"any(floor(channel) ~= channel) || any(channel < 0),\n  error('\"PWM channel(s"
")\" must be a scalar or vector of positive or zero integers.')\nend\n\nif ~is"
"real(pwm) || ~isvector(pwm) ...\n   || any(floor(pwm) ~= pwm) || any(pwm < 0)"
",\n  error('\"PWM resource(s)\" must be a scalar or vector of positive or zer"
"o integers.')\nend"
          Parameter {
            Variable      "channel"
            Prompt        "PWM channel(s)"
            Type          FreeText
            Value         "0"
            Show          on
            Tunable       off
            TabName       ""
          }
          Parameter {
            Variable      "pwm"
            Prompt        "PWM resources(s)"
            Type          FreeText
            Value         "1"
            Show          on
            Tunable       off
            TabName       ""
          }
          Parameter {
            Variable      "prd"
            Prompt        "Period (counts)"
            Type          FreeText
            Value         "2250"
            Show          on
            Tunable       off
            TabName       ""
          }
          Parameter {
            Variable      "dt"
            Prompt        "Deadtime (counts)"
            Type          FreeText
            Value         "50"
            Show          on
            Tunable       off
            TabName       ""
          }
          Terminal {
            Type          Input
            Position      [-25, 0]
            Direction     left
          }
          Schematic {
            Location      [835, 306; 1747, 924]
            ZoomFactor    1
            SliderPosition [0, 0]
            ShowBrowser   off
            BrowserWidth  100
            Component {
              Type          TargetOutput
              Name          "1"
              Show          on
              Position      [260, 80]
              Direction     right
              Flipped       off
              Parameter {
                Variable      "Width"
                Value         "numel(channel)"
                Show          off
              }
            }
            Component {
              Type          Input
              Name          "In1"
              Show          off
              Position      [60, 80]
              Direction     right
              Flipped       off
              Parameter {
                Variable      "Index"
                Value         "1"
                Show          on
              }
              Parameter {
                Variable      "Width"
                Value         "numel(channel)"
                Show          off
              }
            }
            Connection {
              Type          Signal
              SrcComponent  "In1"
              SrcTerminal   1
              DstComponent  "1"
              DstTerminal   1
            }
          }
        }
        Component {
          Type          Constant
          Name          "Constant"
          Show          on
          Position      [245, 250]
          Direction     right
          Flipped       off
          Frame         [-10, -10; 10, 10]
          LabelPosition [0, 13]
          LabelAlign    up
          Parameter {
            Variable      "Value"
            Value         "0.5"
            Show          off
          }
          Parameter {
            Variable      "DataType"
            Value         "9"
            Show          off
          }
        }
        Component {
          Type          TargetCode
          Name          "Analog In (ADC0)"
          Show          on
          Position      [90, 255]
          Direction     up
          Flipped       off
          Frame         [-25, -20; 25, 20]
          LabelPosition [0, 23]
          LabelAlign    up
          TargetPortIndices "3"
          CodeFcnLang   "1"          CodeFcn       "Include(\"hal.h\");\nInclu"
"de(\"ain.h\");\n\nint adc = MaskRealData(MASK_VAR_adc, 0);  \n\nPrint(InitCod"
"e, \"//>table.insert(adcUsed, %i)<//\\n\", adc);      \n\nPrint(InitCode, \"{"
"\");\nPrint(InitCode, \"    AIN_AdcParams_t *paramsAdc = HAL_getDefaultAdcPar"
"ams();\\n\");\nPrint(InitCode, \"    HAL_setupAdc(0, %i, paramsAdc);\\n\", ad"
"c);\nPrint(InitCode, \"}\");\n\nfor (int i = 0; i < NumOutputSignals(0); ++i)"
"\n{\n   int soc = MaskRealData(MASK_VAR_soc, i);\n   int input = MaskRealData"
"(MASK_VAR_input, i);\n\tint ACQPS = MaskRealData(MASK_VAR_ACQPS, i);     \n  "
" double scale = MaskRealData(MASK_VAR_scale, i);\n   double offset = MaskReal"
"Data(MASK_VAR_offset, i);\n      \n   Require(\"Analog input\", soc);\n\n   P"
"rint(InitCode, \"{\\n\");\n\tPrint(InitCode, \"    AIN_ChannelParams_t *param"
"sChannel = HAL_getDefaultAinChannelParams();\\n\");\n\tPrint(InitCode, \"    "
"paramsChannel->ADCSOCxCTL.bit.TRIGSEL = 5+2*(1-1);\\n\"); // epwm4\n   Print("
"InitCode, \"    HAL_setupAnalogInF(%i, %i, %i, paramsChannel, %.9ef, %.9ef);"
"\\n\", adc, soc, input, scale, offset);   \n   Print(InitCode, \"}\\n\");\n  "
" Print(OutputSignal(0, i), \"HAL_getAnalogInF(%i, %i);\\n\", adc, soc);\n}\n"
          MaskType      "Analog In"
          MaskDescription "Output the measured voltage at an analog input chan"
"nel.\n\nThe output signal is calculated as input*Scale+Offset, where input is"
" the input voltage in Volts."
          MaskHelp      "ai_rtbox.html"
          MaskDisplay   "text(['Analog' char(10) 'In'])"
          MaskIconFrame on
          MaskIconOpaque off
          MaskIconRotates on
          Parameter {
            Variable      "adc"
            Prompt        "ADC"
            Type          FreeText
            Value         "0"
            Show          on
            Tunable       off
            TabName       ""
          }
          Parameter {
            Variable      "soc"
            Prompt        "Analog conversion(s) (SOC)"
            Type          FreeText
            Value         "0"
            Show          on
            Tunable       off
            TabName       ""
          }
          Parameter {
            Variable      "input"
            Prompt        "Analog input channel"
            Type          FreeText
            Value         "0"
            Show          on
            Tunable       off
            TabName       ""
          }
          Parameter {
            Variable      "ACQPS"
            Prompt        "Sampling time (ACQPS)"
            Type          FreeText
            Value         "6"
            Show          off
            Tunable       off
            TabName       ""
          }
          Parameter {
            Variable      "scale"
            Prompt        "Scale"
            Type          FreeText
            Value         "1"
            Show          off
            Tunable       off
            TabName       ""
          }
          Parameter {
            Variable      "offset"
            Prompt        "Offset"
            Type          FreeText
            Value         "0"
            Show          off
            Tunable       off
            TabName       ""
          }
          Terminal {
            Type          Output
            Position      [29, 0]
            Direction     right
          }
          Schematic {
            Location      [698, 224; 1901, 554]
            ZoomFactor    1
            SliderPosition [0, 0]
            ShowBrowser   off
            BrowserWidth  100
            Component {
              Type          TargetInput
              Name          "1"
              Show          on
              Position      [120, 75]
              Direction     right
              Flipped       off
              Parameter {
                Variable      "Width"
                Value         "numel(soc)"
                Show          off
              }
            }
            Component {
              Type          Output
              Name          "Out1"
              Show          off
              Position      [260, 75]
              Direction     right
              Flipped       off
              Parameter {
                Variable      "Index"
                Value         "1"
                Show          on
              }
              Parameter {
                Variable      "DataType"
                Value         "9"
                Show          off
              }
              Parameter {
                Variable      "Width"
                Value         "numel(soc)"
                Show          off
              }
            }
            Connection {
              Type          Signal
              SrcComponent  "1"
              SrcTerminal   1
              DstComponent  "Out1"
              DstTerminal   1
            }
          }
        }
        Component {
          Type          TargetCode
          Name          "Digital Out (LED)1"
          Show          on
          Position      [330, 160]
          Direction     up
          Flipped       off
          Frame         [-25, -20; 25, 20]
          LabelPosition [0, 23]
          LabelAlign    up
          TargetPortIndices "4"
          CodeFcnLang   "1"          CodeFcn       "Include(\"hal.h\");\n\nfor"
" (int i = 0; i < NumInputSignals(0); ++i)\n{\n   int channel = MaskRealData(M"
"ASK_VAR_channel, i);\n   int gpio = MaskRealData(MASK_VAR_gpio, i);   \n   \n"
"   //Require(\"Digital output\", channel);  \n   \n\tPrint(InitCode, \"//>tab"
"le.insert(doutUsed, %i)<//\\n\", gpio);      \n   \n   Print(InitCode, \"HAL_"
"setupDigitalOut(%i, %i, false);\\n\", channel, gpio);       \n   Print(Output"
"Code, \"HAL_setDigitalOut(%i, %s);\\n\", channel, InputSignal(0, i));\n}\n"
          MaskType      "Digital Out"
          MaskDisplay   "text(['Digital' char(10) 'Out'])"
          MaskIconFrame on
          MaskIconOpaque off
          MaskIconRotates on
          MaskInit      "if ~isreal(channel) || ~isvector(channel) ...\n   || "
"any(floor(channel) ~= channel) || any(channel < 0),\n  error('\"Digital outpu"
"t channel(s)\" must be a scalar or vector of positive or zero integers.')\nen"
"d\n\nif ~isreal(gpio) || ~isvector(gpio) ...\n   || any(floor(gpio) ~= gpio) "
"|| any(gpio < 0),\n  error('\"Digital output GPIO resources(s)\" must be a sc"
"alar or vector of positive or zero integers.')\nend\n"
          Parameter {
            Variable      "channel"
            Prompt        "Digital output channel(s)"
            Type          FreeText
            Value         "1"
            Show          on
            Tunable       off
            TabName       ""
          }
          Parameter {
            Variable      "gpio"
            Prompt        "Digital output GPIO resource(s)"
            Type          FreeText
            Value         "35"
            Show          on
            Tunable       off
            TabName       ""
          }
          Terminal {
            Type          Input
            Position      [-25, 0]
            Direction     left
          }
          Schematic {
            Location      [941, 338; 1842, 518]
            ZoomFactor    1
            SliderPosition [0, 0]
            ShowBrowser   off
            BrowserWidth  100
            Component {
              Type          TargetOutput
              Name          "1"
              Show          on
              Position      [260, 75]
              Direction     right
              Flipped       off
              Parameter {
                Variable      "Width"
                Value         "numel(channel)"
                Show          off
              }
            }
            Component {
              Type          Input
              Name          "In1"
              Show          off
              Position      [120, 75]
              Direction     right
              Flipped       off
              Parameter {
                Variable      "Index"
                Value         "1"
                Show          on
              }
              Parameter {
                Variable      "Width"
                Value         "numel(channel)"
                Show          off
              }
            }
            Connection {
              Type          Signal
              SrcComponent  "In1"
              SrcTerminal   1
              DstComponent  "1"
              DstTerminal   1
            }
          }
        }
        Connection {
          Type          Signal
          SrcComponent  "Delay1"
          SrcTerminal   2
          DstComponent  "Logical\nOperator1"
          DstTerminal   2
        }
        Connection {
          Type          Signal
          SrcComponent  "C-Script"
          SrcTerminal   2
          DstComponent  "Digital Out (LED)"
          DstTerminal   1
        }
        Connection {
          Type          Signal
          SrcComponent  "Constant"
          SrcTerminal   1
          DstComponent  "PWM Out (ePWM0)"
          DstTerminal   1
        }
        Connection {
          Type          Signal
          SrcComponent  "Logical\nOperator1"
          SrcTerminal   1
          Points        [190, 100]
          Branch {
            Points        [190, 65]
            Branch {
              Points        [65, 65; 65, 100]
              DstComponent  "Delay1"
              DstTerminal   1
            }
            Branch {
              DstComponent  "C-Script"
              DstTerminal   1
            }
          }
          Branch {
            Points        [190, 160]
            DstComponent  "Digital Out (LED)1"
            DstTerminal   1
          }
        }
        Annotation {
          Name          "Blinking on Launchpad"
          Position      [100, 45]
        } 
      }
    }
  }
}
DemoSignature "HTRE3gvjy32aYVaX/XWEYhuqwIBHXc6Ip44qMQIboIw="
