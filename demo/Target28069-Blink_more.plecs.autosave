Plecs {
  Name          "Target28069-Blink_more"
  Version       "4.2"
  CircuitModel  "ContStateSpace"
  StartTime     "0.0"
  StopTime      "1.0"
  Timeout       ""
  Solver        "dopri"
  MaxStep       "1e-3"
  InitStep      "-1"
  FixedStep     "1e-3"
  Refine        "1"
  ZCStepSize    "1e-9"
  RelTol        "1e-3"
  AbsTol        "-1"
  TurnOnThreshold "0"
  SyncFixedStepTasks "2"
  UseSingleCommonBaseRate "2"
  LossVariableLimitExceededMsg "3"
  NegativeSwitchLossMsg "3"
  DivisionByZeroMsg "3"
  StiffnessDetectionMsg "2"
  MaxConsecutiveZCs "1000"
  AlgebraicLoopWithStateMachineMsg "2"
  AssertionAction "1"
  InitializationCommands "Ts_plant = 5e-6;\nTs_controller = 100e-6;"
  InitialState  "1"
  SystemState   ""
  CodeGenParameterInlining "2"
  CodeGenInliningExceptions "AAAACwAAAAAA"
  CodeGenFloatingPointFormat "2"
  CodeGenIntegerWordSize "32"
  CodeGenAbsTimeUsageMsg "3"
  CodeGenBaseName ""
  CodeGenOutputDir ""
  CodeGenExtraOpts ""
  CodeGenTarget "TI28069"
  CodeGenTargetSettings "AAAAfwAAAAAWUU1hcDxRU3RyaW5nLFFTdHJpbmc+AAAAAAwAAAASA"
"HUAcwBlAEkAbgB0AE8AcwBjAAAAAgAxAAAAPAB0AGkAbQBlAEIAYQBzAGUAVAByAGkAZwBnAGUAcg"
"BSAGUAcwBvAHUAcgBjAGUAQQBkAGMARQBQAHcAbQAAAAIAMQAAAEQAdABpAG0AZQBCAGEAcwBlAFQ"
"AcgBpAGcAZwBlAHIAUgBlAHMAbwB1AHIAYwBlAEEAZABjAEMAcAB1AFQAaQBtAGUAcgAAAAIAMQAA"
"AC4AdABpAG0AZQBCAGEAcwBlAFQAcgBpAGcAZwBlAHIAUgBlAHMAbwB1AHIAYwBlAAAAAgAxAAAAH"
"gB0AGkAbQBlAEIAYQBzAGUAVAByAGkAZwBnAGUAcgAAAAIAMQAAABYAdABpAG0AZQBCAGEAcwBlAE"
"MAbABrAAAAAgAxAAAADgB0AGEAcwBrADIASAB6AAAABgAxADAAMAAAABAAcwB5AHMAQwBsAGsASAB"
"6AAAAEAA5ADAAMAAwADAAMAAwADAAAAAUAGkAbgBzAHQAYQBsAGwARABpAHIAAAAAAAAADgBnAGUA"
"bgBPAG4AbAB5AAAAAgAwAAAAEABlAHgAdABDAGwAawBIAHoAAAAQADIAMAAwADAAMAAwADAAMAAAA"
"CAAZABPAHUAdABQAHMARQBuAGEAYgBsAGUARwBQAEkATwAAAAQAMgA3"
  ExtendedMatrixPrecision "1"
  MatrixSignificanceCheck "2"
  EnableStateSpaceSplitting "2"
  DisplayStateSpaceSplitting "1"
  DiscretizationMethod "2"
  ExternalModeSettings "AAAAfwAAAAAWUU1hcDxRU3RyaW5nLFFTdHJpbmc+AAAAAAYAAAAYAF"
"QAcgBpAGcAZwBlAHIAVgBhAGwAdQBlAAAAAgAwAAAAGABUAHIAaQBnAGcAZQByAEQAZQBsAGEAeQA"
"AAAIAMAAAABYAUwBlAG4AcwBpAHQAaQB2AGkAdAB5AAAAAgAwAAAAFgBSAGUAZgByAGUAcwBoAFIA"
"YQB0AGUAAAAEADIAMAAAABQATgB1AG0AUwBhAG0AcABsAGUAcwAAAAgAOAAxADkAMgAAABQARABlA"
"GMAaQBtAGEAdABpAG8AbgAAAAIAMQ=="
  AlgebraicLoopMethod "1"
  AlgebraicLoopTolerance "1e-6"
  Schematic {
    Location      [951, 235; 1292, 414]
    ZoomFactor    1
    SliderPosition [0, 0]
    ShowBrowser   off
    BrowserWidth  100
    Component {
      Type          Subsystem
      Name          "Controls"
      Show          on
      Position      [175, 75]
      Direction     up
      Flipped       off
      Frame         [-95, -25; 95, 25]
      LabelPosition [0, 28]
      LabelAlign    up
      TreatAsAtomicUnit on
      SampleTime    "-1"
      CodeGenEnable on
      CodeGenSampleTime "Ts_controller"
      CodeGenTarget "TI28069"
      CodeGenTargetSettings "AAAAfwAAAAAWUU1hcDxRU3RyaW5nLFFTdHJpbmc+AAAAAAwAA"
"AASAHUAcwBlAEkAbgB0AE8AcwBjAAAAAgAxAAAAPAB0AGkAbQBlAEIAYQBzAGUAVAByAGkAZwBnAG"
"UAcgBSAGUAcwBvAHUAcgBjAGUAQQBkAGMARQBQAHcAbQAAAAIAMQAAAEQAdABpAG0AZQBCAGEAcwB"
"lAFQAcgBpAGcAZwBlAHIAUgBlAHMAbwB1AHIAYwBlAEEAZABjAEMAcAB1AFQAaQBtAGUAcgAAAAIA"
"MQAAAC4AdABpAG0AZQBCAGEAcwBlAFQAcgBpAGcAZwBlAHIAUgBlAHMAbwB1AHIAYwBlAAAAAgAxA"
"AAAHgB0AGkAbQBlAEIAYQBzAGUAVAByAGkAZwBnAGUAcgAAAAIAMQAAABYAdABpAG0AZQBCAGEAcw"
"BlAEMAbABrAAAAAgAxAAAADgB0AGEAcwBrADIASAB6AAAABgAxADAAMAAAABAAcwB5AHMAQwBsAGs"
"ASAB6AAAAEAA5ADAAMAAwADAAMAAwADAAAAAUAGkAbgBzAHQAYQBsAGwARABpAHIAAABOACIALwBV"
"AHMAZQByAHMALwBiAGUAYQB0AC8AdwBvAHIAawBzAHAAYQBjAGUAXwB2ADcALwBkAGUAdgBfADIAO"
"AAwADYAOQAvAGMAZwAiAAAADgBnAGUAbgBPAG4AbAB5AAAAAgAxAAAAEABlAHgAdABDAGwAawBIAH"
"oAAAAQADIAMAAwADAAMAAwADAAMAAAACAAZABPAHUAdABQAHMARQBuAGEAYgBsAGUARwBQAEkATwA"
"AAAQAMgA3"
      ExternalModeSettings "AAAAfwAAAAAWUU1hcDxRU3RyaW5nLFFTdHJpbmc+AAAAAAYAAA"
"AYAFQAcgBpAGcAZwBlAHIAVgBhAGwAdQBlAAAAAgAwAAAAGABUAHIAaQBnAGcAZQByAEQAZQBsAGE"
"AeQAAAAIAMAAAABYAUwBlAG4AcwBpAHQAaQB2AGkAdAB5AAAAAgAwAAAAFgBSAGUAZgByAGUAcwBo"
"AFIAYQB0AGUAAAAEADIAMAAAABQATgB1AG0AUwBhAG0AcABsAGUAcwAAAAgAOAAxADkAMgAAABQAR"
"ABlAGMAaQBtAGEAdABpAG8AbgAAAAIAMQ=="
      MaskIconFrame on
      MaskIconOpaque off
      MaskIconRotates on
      Terminal {
        Type          Output
        Position      [99, -15]
        Direction     right
        Index         "1"
      }
      Terminal {
        Type          Input
        Position      [-95, -15]
        Direction     left
        Index         "1"
      }
      Terminal {
        Type          Output
        Position      [99, 5]
        Direction     right
        Index         "2"
      }
      Terminal {
        Type          Input
        Position      [-95, -5]
        Direction     left
        Index         "2"
      }
      Terminal {
        Type          Input
        Position      [-95, 5]
        Direction     left
        Index         "3"
      }
      Terminal {
        Type          Output
        Position      [99, -5]
        Direction     right
        Index         "3"
      }
      Terminal {
        Type          Output
        Position      [99, 15]
        Direction     right
        Index         "4"
      }
      Schematic {
        Location      [359, 83; 864, 750]
        ZoomFactor    1
        SliderPosition [0, 0]
        ShowBrowser   off
        BrowserWidth  100
        Component {
          Type          Delay
          Name          "Delay1"
          Show          off
          Position      [105, 100]
          Direction     right
          Flipped       off
          Parameter {
            Variable      "N"
            Value         "1"
            Show          off
          }
          Parameter {
            Variable      "X0"
            Value         "0"
            Show          off
          }
          Parameter {
            Variable      "Ts"
            Value         "floor(0.5/Ts_controller)*Ts_controller"
            Show          off
          }
        }
        Component {
          Type          LogicalOperator
          Name          "Logical\nOperator1"
          Show          off
          Position      [155, 100]
          Direction     up
          Flipped       off
          Parameter {
            Variable      "Operator"
            Value         "6"
            Show          off
          }
          Parameter {
            Variable      "Inputs"
            Value         "1"
            Show          off
          }
        }
        Component {
          Type          CScript
          Name          "C-Script"
          Show          on
          Position      [250, 65]
          Direction     up
          Flipped       off
          Parameter {
            Variable      "NumInputs"
            Value         "1"
            Show          off
          }
          Parameter {
            Variable      "NumOutputs"
            Value         "1"
            Show          off
          }
          Parameter {
            Variable      "NumContStates"
            Value         "0"
            Show          off
          }
          Parameter {
            Variable      "NumDiscStates"
            Value         "0"
            Show          off
          }
          Parameter {
            Variable      "NumZCSignals"
            Value         "0"
            Show          off
          }
          Parameter {
            Variable      "DirectFeedthrough"
            Value         "1"
            Show          off
          }
          Parameter {
            Variable      "Ts"
            Value         "1e-3"
            Show          off
          }
          Parameter {
            Variable      "Parameters"
            Value         ""
            Show          off
          }
          Parameter {
            Variable      "LangStandard"
            Value         "2"
            Show          off
          }
          Parameter {
            Variable      "GnuExtensions"
            Value         "2"
            Show          off
          }
          Parameter {
            Variable      "RuntimeCheck"
            Value         "2"
            Show          off
          }
          Parameter {
            Variable      "Declarations"
            Value         ""
            Show          off
          }
          Parameter {
            Variable      "StartFcn"
            Value         ""
            Show          off
          }
          Parameter {
            Variable      "OutputFcn"
            Value         "Output(0)=Input(0);"
            Show          off
          }
          Parameter {
            Variable      "UpdateFcn"
            Value         ""
            Show          off
          }
          Parameter {
            Variable      "DerivativeFcn"
            Value         ""
            Show          off
          }
          Parameter {
            Variable      "TerminateFcn"
            Value         ""
            Show          off
          }
        }
        Component {
          Type          TargetCode
          Name          "Digital Out (LED)"
          Show          on
          Position      [400, 65]
          Direction     up
          Flipped       off
          Frame         [-25, -20; 25, 20]
          LabelPosition [0, 23]
          LabelAlign    up
          TargetPortIndices "1"
          SampleTime    "0"
          CodeFcnLang   "2"
          CodeFcn       "local Require = {}\nlocal InitCode = {}\nlocal Output"
"Code = {}\n\nfor i = 1, #Block.InputSignal[1] do\n  local instance = Target.C"
"oder.RegisterDigitalOutBlock()\n  local gpio = Block.Mask.gpio[i]\n\n  table."
"insert(Require, string.format(\"GPIO:%i\", gpio))    \n  table.insert(InitCod"
"e, string.format(\"HAL_setupDigitalOut(%i, %i, false);\", instance, gpio))\n "
" table.insert(OutputCode, string.format(\"HAL_setDigitalOut(%i, %s);\", insta"
"nce, Block.InputSignal[1][i]))\nend\n\nreturn {\n  Include = \"hal.h\",\n  In"
"itCode = InitCode,\n  OutputCode = OutputCode,\n  Require = Require\n}"
          MaskType      "Digital Out"
          MaskDisplay   "text(['Digital' char(10) 'Out'])"
          MaskIconFrame on
          MaskIconOpaque off
          MaskIconRotates on
          MaskInit      "if ~isreal(gpio) || ~isvector(gpio) ...\n   || any(fl"
"oor(gpio) ~= gpio) || any(gpio < 0),\n  error('\"Digital output GPIO resource"
"s(s)\" must be a scalar or vector of positive or zero integers.')\nend\n"
          Parameter {
            Variable      "gpio"
            Prompt        "Digital output GPIO resource(s)"
            Type          FreeText
            Value         "[11]"
            Show          on
            Tunable       off
            TabName       ""
          }
          Terminal {
            Type          Input
            Position      [-25, 0]
            Direction     left
          }
          Schematic {
            Location      [406, 198; 1274, 378]
            ZoomFactor    1
            SliderPosition [0, 0]
            ShowBrowser   off
            BrowserWidth  100
            Component {
              Type          TargetOutput
              Name          "1"
              Show          on
              Position      [260, 75]
              Direction     right
              Flipped       off
              Parameter {
                Variable      "Width"
                Value         "numel(gpio)"
                Show          off
              }
            }
            Component {
              Type          Input
              Name          "In1"
              Show          off
              Position      [120, 75]
              Direction     right
              Flipped       off
              Parameter {
                Variable      "Index"
                Value         "1"
                Show          on
              }
              Parameter {
                Variable      "Width"
                Value         "numel(gpio)"
                Show          off
              }
            }
            Connection {
              Type          Signal
              SrcComponent  "In1"
              SrcTerminal   1
              DstComponent  "1"
              DstTerminal   1
            }
          }
        }
        Component {
          Type          TargetCode
          Name          "Digital In1"
          Show          off
          Position      [100, 205]
          Direction     up
          Flipped       off
          Frame         [-25, -20; 25, 20]
          LabelPosition [0, 23]
          LabelAlign    up
          TargetPortIndices "2"
          SampleTime    "0"
          CodeFcnLang   "2"
          CodeFcn       "local Require = {}\nlocal InitCode = {}\nlocal Output"
"Signal = {}\n\nfor i = 1, Block.NumOutputSignals[1] do\n  local instance = Ta"
"rget.Coder.RegisterDigitalInBlock()\n  local gpio = Block.Mask.gpio[i]\n\n  t"
"able.insert(Require, string.format(\"GPIO:%i\", gpio))  \n  table.insert(Init"
"Code, string.format(\"HAL_setupDigitalIn(%i, %i);\", instance, gpio))\n  tabl"
"e.insert(OutputSignal, string.format(\"HAL_getDigitalIn(%i)\", instance))   "
"\nend\n\nreturn {\n  Include = \"hal.h\",\n  InitCode = InitCode,\n  OutputSi"
"gnal = { OutputSignal },\n  Require = Require\n}\n"
          MaskType      "Digital In"
          MaskDescription "Reads a digital input.\n\nThe output signal is 1 if"
" the input voltage is higher than 2 Volts and 0 if it is lower than 0.8 Volts"
". \nFor other input voltages the output signal is undefined."
          MaskHelp      "di_rtbox.html"
          MaskDisplay   "text(['Digital' char(10) 'In'])"
          MaskIconFrame on
          MaskIconOpaque off
          MaskIconRotates on
          MaskInit      "if ~isreal(gpio) || ~isvector(gpio) ...\n   || any(fl"
"oor(gpio) ~= gpio) || any(gpio < 0),\n  error('\"Digital output GPIO resource"
"s(s)\" must be a scalar or vector of positive or zero integers.')\nend"
          Parameter {
            Variable      "gpio"
            Prompt        "Digital input GPIO resource(s)"
            Type          FreeText
            Value         "[13 14]"
            Show          on
            Tunable       off
            TabName       ""
          }
          Terminal {
            Type          Output
            Position      [29, 0]
            Direction     right
          }
          Schematic {
            Location      [597, 319; 1584, 499]
            ZoomFactor    1
            SliderPosition [0, 0]
            ShowBrowser   off
            BrowserWidth  100
            Component {
              Type          TargetInput
              Name          "1"
              Show          on
              Position      [120, 75]
              Direction     right
              Flipped       off
              Parameter {
                Variable      "Width"
                Value         "numel(gpio)"
                Show          off
              }
            }
            Component {
              Type          Output
              Name          "Out1"
              Show          off
              Position      [260, 75]
              Direction     right
              Flipped       off
              Parameter {
                Variable      "Index"
                Value         "1"
                Show          on
              }
              Parameter {
                Variable      "DataType"
                Value         "9"
                Show          off
              }
              Parameter {
                Variable      "Width"
                Value         "numel(gpio)"
                Show          off
              }
            }
            Connection {
              Type          Signal
              SrcComponent  "1"
              SrcTerminal   1
              DstComponent  "Out1"
              DstTerminal   1
            }
          }
        }
        Component {
          Type          TargetCode
          Name          "PWM Out (ePWM0)"
          Show          on
          Position      [405, 340]
          Direction     up
          Flipped       off
          Frame         [-25, -20; 25, 20]
          LabelPosition [0, 23]
          LabelAlign    up
          TargetPortIndices "3"
          SampleTime    "0"
          CodeFcnLang   "2"
          CodeFcn       "local get_from_array_or_scalar = function(field, inde"
"x, majordim)\n\tif #field == 1 then\n   \treturn field[1]\n  \telseif #field "
"== majordim then\n  \t \treturn field[index]\n  \telse\n    \treturn nil\t\n "
" \tend  \n\nend\n\nlocal Require = {}\nlocal InitCode = {}\nlocal OutputCode "
"= {}\n\nlocal dim = #Block.InputSignal[1]\nfor i = 1, dim do\n  local pwm = B"
"lock.Mask.pwm[i]\n  table.insert(Require, string.format(\"EPWM:%i\", pwm))  "
"\n  \n  local prd = get_from_array_or_scalar(Block.Mask.prd, i, dim)\n  if pr"
"d == nil then\n    return \"Invalid width of parameter 'prd'.\" \t\n  end  \n"
"  \n  local dt = get_from_array_or_scalar(Block.Mask.dt, i, dim)\n  if dt == "
"nil then\n  \t return \"Invalid width of parameter 'dt'.\"\n  end    \n    \n"
"  local pwmParams = {period = prd, dt = dt}\n  \n  local instance, gpio = Tar"
"get.Coder.RegisterPwmOutBlock(pwm, pwmParams)\n  table.insert(Require, string"
".format(\"GPIO:%i\", gpio))    \n  \n  table.insert(InitCode, string.format("
"\"{\"))  \n  table.insert(InitCode, string.format(\"  PWM_Params_t *params = "
"HAL_getDefaultPwmParams(%i, %i);\", prd, dt))\n  table.insert(InitCode, strin"
"g.format(\"  HAL_setupPwmOut(%i, %i, params);\", instance, pwm))  \n  table.i"
"nsert(InitCode, string.format(\"}\"))\n     \n  table.insert(OutputCode, stri"
"ng.format(\"HAL_setPwmOutF(%i, %s);\", instance, Block.InputSignal[1][i]))\ne"
"nd\n\nreturn {\n  Include = \"hal.h\",\n  InitCode = InitCode,\n  OutputCode "
"= OutputCode,\n  Require = Require\n}\n\n"
          MaskType      "PWM Out"
          MaskDescription "Generate a configurable PWM signal on a digital out"
"put."
          MaskHelp      "pwmout_rtbox.html"
          MaskDisplay   "text(['PWM' char(10) 'Out'])"
          MaskIconFrame on
          MaskIconOpaque off
          MaskIconRotates on
          MaskInit      "if ~isreal(pwm) || ~isvector(pwm) ...\n   || any(floo"
"r(pwm) ~= pwm) || any(pwm < 0),\n  error('\"PWM resource(s)\" must be a scala"
"r or vector of positive or zero integers.')\nend"
          Parameter {
            Variable      "pwm"
            Prompt        "PWM resources(s)"
            Type          FreeText
            Value         "[1 2]"
            Show          on
            Tunable       off
            TabName       ""
          }
          Parameter {
            Variable      "prd"
            Prompt        "Period (counts)"
            Type          FreeText
            Value         "2250"
            Show          on
            Tunable       off
            TabName       ""
          }
          Parameter {
            Variable      "dt"
            Prompt        "Deadtime (counts)"
            Type          FreeText
            Value         "50"
            Show          on
            Tunable       off
            TabName       ""
          }
          Terminal {
            Type          Input
            Position      [-25, 0]
            Direction     left
          }
          Schematic {
            Location      [377, 128; 1281, 646]
            ZoomFactor    1
            SliderPosition [0, 0]
            ShowBrowser   off
            BrowserWidth  100
            Component {
              Type          TargetOutput
              Name          "1"
              Show          on
              Position      [260, 80]
              Direction     right
              Flipped       off
              Parameter {
                Variable      "Width"
                Value         "numel(pwm)"
                Show          off
              }
            }
            Component {
              Type          Input
              Name          "In1"
              Show          off
              Position      [60, 80]
              Direction     right
              Flipped       off
              Parameter {
                Variable      "Index"
                Value         "1"
                Show          on
              }
              Parameter {
                Variable      "Width"
                Value         "numel(pwm)"
                Show          off
              }
            }
            Connection {
              Type          Signal
              SrcComponent  "In1"
              SrcTerminal   1
              DstComponent  "1"
              DstTerminal   1
            }
          }
        }
        Component {
          Type          Constant
          Name          "Constant"
          Show          on
          Position      [310, 340]
          Direction     right
          Flipped       off
          Frame         [-10, -10; 10, 10]
          LabelPosition [0, 13]
          LabelAlign    up
          Parameter {
            Variable      "Value"
            Value         "[0.5 0.1]"
            Show          on
          }
          Parameter {
            Variable      "DataType"
            Value         "9"
            Show          off
          }
        }
        Component {
          Type          TargetCode
          Name          "Analog In (ADC0)"
          Show          off
          Position      [100, 335]
          Direction     up
          Flipped       off
          Frame         [-25, -20; 25, 20]
          LabelPosition [0, 23]
          LabelAlign    up
          TargetPortIndices "4"
          SampleTime    "0"
          CodeFcnLang   "2"
          CodeFcn       "local get_from_array_or_scalar = function(field, inde"
"x, majordim)\n\tif #field == 1 then\n   \treturn field[1]\n  \telseif #field "
"== majordim then\n  \t \treturn field[index]\n  \telse\n    \treturn nil\t\n "
" \tend  \n\nend\n\nlocal Require = {}\nlocal InitCode = {}\nlocal OutputSigna"
"l = {}\n\nlocal adc = Block.Mask.adc[1]\ntable.insert(Require, string.format("
"\"ADC:%i\", adc))  \n\nlocal adcParams = {}\nlocal instance = Target.Coder.Re"
"gisterAdcBlock(adc, adcParams)\n\n\ntable.insert(InitCode, string.format(\"{"
"\"))  \ntable.insert(InitCode, string.format(\"  AIN_AdcParams_t *paramsAdc ="
" HAL_getDefaultAdcParams();\"))\ntable.insert(InitCode, string.format(\"  HAL"
"_setupAdc(%i, %i, paramsAdc);\", instance, adc))  \ntable.insert(InitCode, st"
"ring.format(\"}\"))\n  \nif #Block.Mask.soc ~= #Block.Mask.input then\n\tretu"
"rn \"'soc' and 'input' must have same width.\"\nend\n  \nlocal configuredSocs"
" = {}\nlocal highestSoc = 0\nlocal dim = Block.NumOutputSignals[1];\nfor i = "
"1, dim do\n   local soc = Block.Mask.soc[i]\n   \n\tif configuredSocs[soc] ~="
" nil then\n\t\treturn string.format(\"SOC%i already configured.\", soc)\t\t\n"
"\tend\n\tconfiguredSocs[soc] = true\n\tif soc > highestSoc then\n\t\thighestS"
"oc = soc\n\tend\n\t\n   local input = Block.Mask.input[i]\n   \n   local ACQP"
"S = get_from_array_or_scalar(Block.Mask.ACQPS, i, dim)\n   if ACQPS == nil th"
"en\n    \treturn \"Invalid width of parameter 'ACQPS'.\" \t\n  \tend  \n  \t"
"\n  \tlocal scale = get_from_array_or_scalar(Block.Mask.scale, i, dim)\n   if"
" scale == nil then\n    \treturn \"Invalid width of parameter 'scale'.\" \t\n"
"  \tend  \n  \t\n  \tlocal offset = get_from_array_or_scalar(Block.Mask.offse"
"t, i, dim)\n   if offset == nil then\n     \treturn \"Invalid width of parame"
"ter 'offset'.\" \t\n  \tend  \n   \n  \tlocal TRIGSEL = get_from_array_or_sca"
"lar(Block.Mask.TRIGSEL, i, dim)\n   if TRIGSEL == nil then\n    \treturn \"In"
"valid width of parameter 'TRIGSEL'.\" \t\n  \tend     \n  \n   table.insert(I"
"nitCode, string.format(\"{\"))  \n   table.insert(InitCode, string.format(\" "
" AIN_ChannelParams_t *paramsChannel = HAL_getDefaultAinChannelParams();\"))\n"
"   table.insert(InitCode, string.format(\"  paramsChannel->ADCSOCxCTL.bit.TRI"
"GSEL = %i;\", TRIGSEL))  \n   table.insert(InitCode, string.format(\"  HAL_se"
"tupAnalogInF(%i, %i, %i, paramsChannel, %.9ef, %.9ef);\", instance, soc, inpu"
"t, scale, offset)) \n   table.insert(InitCode, string.format(\"}\"))\n     \n"
"   table.insert(OutputSignal, string.format(\"HAL_getAnalogInF(%i, %i);\", in"
"stance, soc))   \nend\n\nadcParams['lastsoc'] = highestSoc\n\nreturn {\n  Inc"
"lude = \"hal.h\",\n  InitCode = InitCode,\n  OutputSignal = { OutputSignal },"
"\n  Require = Require\n}\n\n"
          MaskType      "Analog In"
          MaskDescription "Output the measured voltage at an analog input chan"
"nel.\n\nThe output signal is calculated as input*Scale+Offset, where input is"
" the input voltage in Volts."
          MaskHelp      "ai_rtbox.html"
          MaskDisplay   "text(['Analog' char(10) 'In'])"
          MaskIconFrame on
          MaskIconOpaque off
          MaskIconRotates on
          Parameter {
            Variable      "adc"
            Prompt        "ADC"
            Type          FreeText
            Value         "7"
            Show          on
            Tunable       off
            TabName       ""
          }
          Parameter {
            Variable      "soc"
            Prompt        "Analog conversion(s) (SOC)"
            Type          FreeText
            Value         "[0 7]"
            Show          on
            Tunable       off
            TabName       ""
          }
          Parameter {
            Variable      "input"
            Prompt        "Analog input channel"
            Type          FreeText
            Value         "[0 0]"
            Show          on
            Tunable       off
            TabName       ""
          }
          Parameter {
            Variable      "ACQPS"
            Prompt        "Sampling time (ACQPS)"
            Type          FreeText
            Value         "6"
            Show          on
            Tunable       off
            TabName       ""
          }
          Parameter {
            Variable      "scale"
            Prompt        "Scale"
            Type          FreeText
            Value         "1"
            Show          on
            Tunable       off
            TabName       ""
          }
          Parameter {
            Variable      "offset"
            Prompt        "Offset"
            Type          FreeText
            Value         "0"
            Show          on
            Tunable       off
            TabName       ""
          }
          Parameter {
            Variable      "TRIGSEL"
            Prompt        "TRIGSEL"
            Type          FreeText
            Value         "5+2*(1-1)"
            Show          on
            Tunable       off
            TabName       ""
          }
          Terminal {
            Type          Output
            Position      [29, 0]
            Direction     right
          }
          Schematic {
            Location      [82, 145; 919, 325]
            ZoomFactor    1
            SliderPosition [0, 0]
            ShowBrowser   off
            BrowserWidth  100
            Component {
              Type          TargetInput
              Name          "1"
              Show          on
              Position      [120, 75]
              Direction     right
              Flipped       off
              Parameter {
                Variable      "Width"
                Value         "numel(soc)"
                Show          off
              }
            }
            Component {
              Type          Output
              Name          "Out1"
              Show          off
              Position      [260, 75]
              Direction     right
              Flipped       off
              Parameter {
                Variable      "Index"
                Value         "1"
                Show          on
              }
              Parameter {
                Variable      "DataType"
                Value         "9"
                Show          off
              }
              Parameter {
                Variable      "Width"
                Value         "numel(soc)"
                Show          off
              }
            }
            Connection {
              Type          Signal
              SrcComponent  "1"
              SrcTerminal   1
              DstComponent  "Out1"
              DstTerminal   1
            }
          }
        }
        Component {
          Type          Display
          Name          "Display"
          Show          on
          Position      [185, 335]
          Direction     up
          Flipped       off
          Frame         [-31, -11; 31, 11]
          LabelPosition [0, 14]
          LabelAlign    up
          Parameter {
            Variable      "Notation"
            Value         "1"
            Show          off
          }
          Parameter {
            Variable      "Precision"
            Value         "4"
            Show          off
          }
        }
        Component {
          Type          TargetCode
          Name          "Analog In (ADC0)1"
          Show          off
          Position      [95, 500]
          Direction     up
          Flipped       off
          Frame         [-25, -20; 25, 20]
          LabelPosition [0, 23]
          LabelAlign    up
          TargetPortIndices "5"
          SampleTime    "0"
          CodeFcnLang   "2"
          CodeFcn       "local get_from_array_or_scalar = function(field, inde"
"x, majordim)\n\tif #field == 1 then\n   \treturn field[1]\n  \telseif #field "
"== majordim then\n  \t \treturn field[index]\n  \telse\n    \treturn nil\t\n "
" \tend  \n\nend\n\nlocal Require = {}\nlocal InitCode = {}\nlocal OutputSigna"
"l = {}\n\nlocal adc = Block.Mask.adc[1]\ntable.insert(Require, string.format("
"\"ADC:%i\", adc))  \n\nlocal adcParams = {}\nlocal instance = Target.Coder.Re"
"gisterAdcBlock(adc, adcParams)\n\n\ntable.insert(InitCode, string.format(\"{"
"\"))  \ntable.insert(InitCode, string.format(\"  AIN_AdcParams_t *paramsAdc ="
" HAL_getDefaultAdcParams();\"))\ntable.insert(InitCode, string.format(\"  HAL"
"_setupAdc(%i, %i, paramsAdc);\", instance, adc))  \ntable.insert(InitCode, st"
"ring.format(\"}\"))\n  \nif #Block.Mask.soc ~= #Block.Mask.input then\n\tretu"
"rn \"'soc' and 'input' must have same width.\"\nend\n  \nlocal configuredSocs"
" = {}\nlocal highestSoc = 0\nlocal dim = Block.NumOutputSignals[1];\nfor i = "
"1, dim do\n   local soc = Block.Mask.soc[i]\n   \n\tif configuredSocs[soc] ~="
" nil then\n\t\treturn string.format(\"SOC%i already configured.\", soc)\t\t\n"
"\tend\n\tconfiguredSocs[soc] = true\n\tif soc > highestSoc then\n\t\thighestS"
"oc = soc\n\tend\n\t\n   local input = Block.Mask.input[i]\n   \n   local ACQP"
"S = get_from_array_or_scalar(Block.Mask.ACQPS, i, dim)\n   if ACQPS == nil th"
"en\n    \treturn \"Invalid width of parameter 'ACQPS'.\" \t\n  \tend  \n  \t"
"\n  \tlocal scale = get_from_array_or_scalar(Block.Mask.scale, i, dim)\n   if"
" scale == nil then\n    \treturn \"Invalid width of parameter 'scale'.\" \t\n"
"  \tend  \n  \t\n  \tlocal offset = get_from_array_or_scalar(Block.Mask.offse"
"t, i, dim)\n   if offset == nil then\n     \treturn \"Invalid width of parame"
"ter 'offset'.\" \t\n  \tend  \n   \n  \tlocal TRIGSEL = get_from_array_or_sca"
"lar(Block.Mask.TRIGSEL, i, dim)\n   if TRIGSEL == nil then\n    \treturn \"In"
"valid width of parameter 'TRIGSEL'.\" \t\n  \tend     \n  \n   table.insert(I"
"nitCode, string.format(\"{\"))  \n   table.insert(InitCode, string.format(\" "
" AIN_ChannelParams_t *paramsChannel = HAL_getDefaultAinChannelParams();\"))\n"
"   table.insert(InitCode, string.format(\"  paramsChannel->ADCSOCxCTL.bit.TRI"
"GSEL = %i;\", TRIGSEL))  \n   table.insert(InitCode, string.format(\"  HAL_se"
"tupAnalogInF(%i, %i, %i, paramsChannel, %.9ef, %.9ef);\", instance, soc, inpu"
"t, scale, offset)) \n   table.insert(InitCode, string.format(\"}\"))\n     \n"
"   table.insert(OutputSignal, string.format(\"HAL_getAnalogInF(%i, %i);\", in"
"stance, soc))   \nend\n\nadcParams['lastsoc'] = highestSoc\n\nreturn {\n  Inc"
"lude = \"hal.h\",\n  InitCode = InitCode,\n  OutputSignal = { OutputSignal },"
"\n  Require = Require\n}\n\n"
          MaskType      "Analog In"
          MaskDescription "Output the measured voltage at an analog input chan"
"nel.\n\nThe output signal is calculated as input*Scale+Offset, where input is"
" the input voltage in Volts."
          MaskHelp      "ai_rtbox.html"
          MaskDisplay   "text(['Analog' char(10) 'In'])"
          MaskIconFrame on
          MaskIconOpaque off
          MaskIconRotates on
          Parameter {
            Variable      "adc"
            Prompt        "ADC"
            Type          FreeText
            Value         "1"
            Show          on
            Tunable       off
            TabName       ""
          }
          Parameter {
            Variable      "soc"
            Prompt        "Analog conversion(s) (SOC)"
            Type          FreeText
            Value         "[0 1]"
            Show          on
            Tunable       off
            TabName       ""
          }
          Parameter {
            Variable      "input"
            Prompt        "Analog input channel"
            Type          FreeText
            Value         "[0 0]"
            Show          on
            Tunable       off
            TabName       ""
          }
          Parameter {
            Variable      "ACQPS"
            Prompt        "Sampling time (ACQPS)"
            Type          FreeText
            Value         "6"
            Show          on
            Tunable       off
            TabName       ""
          }
          Parameter {
            Variable      "scale"
            Prompt        "Scale"
            Type          FreeText
            Value         "1"
            Show          on
            Tunable       off
            TabName       ""
          }
          Parameter {
            Variable      "offset"
            Prompt        "Offset"
            Type          FreeText
            Value         "0"
            Show          on
            Tunable       off
            TabName       ""
          }
          Parameter {
            Variable      "TRIGSEL"
            Prompt        "TRIGSEL"
            Type          FreeText
            Value         "5+2*(1-1)"
            Show          on
            Tunable       off
            TabName       ""
          }
          Terminal {
            Type          Output
            Position      [29, 0]
            Direction     right
          }
          Schematic {
            Location      [1460, 148; 2291, 1216]
            ZoomFactor    1
            SliderPosition [0, 0]
            ShowBrowser   off
            BrowserWidth  100
            Component {
              Type          TargetInput
              Name          "1"
              Show          on
              Position      [120, 75]
              Direction     right
              Flipped       off
              Parameter {
                Variable      "Width"
                Value         "numel(soc)"
                Show          off
              }
            }
            Component {
              Type          Output
              Name          "Out1"
              Show          off
              Position      [260, 75]
              Direction     right
              Flipped       off
              Parameter {
                Variable      "Index"
                Value         "1"
                Show          on
              }
              Parameter {
                Variable      "DataType"
                Value         "9"
                Show          off
              }
              Parameter {
                Variable      "Width"
                Value         "numel(soc)"
                Show          off
              }
            }
            Connection {
              Type          Signal
              SrcComponent  "1"
              SrcTerminal   1
              DstComponent  "Out1"
              DstTerminal   1
            }
          }
        }
        Component {
          Type          Display
          Name          "Display1"
          Show          on
          Position      [180, 500]
          Direction     up
          Flipped       off
          Frame         [-31, -11; 31, 11]
          LabelPosition [0, 14]
          LabelAlign    up
          Parameter {
            Variable      "Notation"
            Value         "1"
            Show          off
          }
          Parameter {
            Variable      "Precision"
            Value         "4"
            Show          off
          }
        }
        Component {
          Type          TargetCode
          Name          "Digital Out (LED)1"
          Show          on
          Position      [405, 205]
          Direction     up
          Flipped       off
          Frame         [-25, -20; 25, 20]
          LabelPosition [0, 23]
          LabelAlign    up
          TargetPortIndices "6"
          SampleTime    "0"
          CodeFcnLang   "2"
          CodeFcn       "local Require = {}\nlocal InitCode = {}\nlocal Output"
"Code = {}\n\nfor i = 1, #Block.InputSignal[1] do\n  local instance = Target.C"
"oder.RegisterDigitalOutBlock()\n  local gpio = Block.Mask.gpio[i]\n\n  table."
"insert(Require, string.format(\"GPIO:%i\", gpio))  \n  table.insert(InitCode,"
" string.format(\"HAL_setupDigitalOut(%i, %i, false);\", instance, gpio))\n  t"
"able.insert(OutputCode, string.format(\"HAL_setDigitalOut(%i, %s);\", instanc"
"e, Block.InputSignal[1][i]))\nend\n\nreturn {\n  Include = \"hal.h\",\n  Init"
"Code = InitCode,\n  OutputCode = OutputCode,\n  Require = Require\n}"
          MaskType      "Digital Out"
          MaskDisplay   "text(['Digital' char(10) 'Out'])"
          MaskIconFrame on
          MaskIconOpaque off
          MaskIconRotates on
          MaskInit      "if ~isreal(gpio) || ~isvector(gpio) ...\n   || any(fl"
"oor(gpio) ~= gpio) || any(gpio < 0),\n  error('\"Digital output GPIO resource"
"s(s)\" must be a scalar or vector of positive or zero integers.')\nend\n"
          Parameter {
            Variable      "gpio"
            Prompt        "Digital output GPIO resource(s)"
            Type          FreeText
            Value         "[35 36]"
            Show          on
            Tunable       off
            TabName       ""
          }
          Terminal {
            Type          Input
            Position      [-25, 0]
            Direction     left
          }
          Schematic {
            Location      [1426, 289; 2420, 469]
            ZoomFactor    1
            SliderPosition [0, 0]
            ShowBrowser   off
            BrowserWidth  100
            Component {
              Type          TargetOutput
              Name          "1"
              Show          on
              Position      [260, 75]
              Direction     right
              Flipped       off
              Parameter {
                Variable      "Width"
                Value         "numel(gpio)"
                Show          off
              }
            }
            Component {
              Type          Input
              Name          "In1"
              Show          off
              Position      [120, 75]
              Direction     right
              Flipped       off
              Parameter {
                Variable      "Index"
                Value         "1"
                Show          on
              }
              Parameter {
                Variable      "Width"
                Value         "numel(gpio)"
                Show          off
              }
            }
            Connection {
              Type          Signal
              SrcComponent  "In1"
              SrcTerminal   1
              DstComponent  "1"
              DstTerminal   1
            }
          }
        }
        Component {
          Type          TargetCode
          Name          "PWM Out (ePWM0)1"
          Show          on
          Position      [405, 470]
          Direction     up
          Flipped       off
          Frame         [-25, -20; 25, 20]
          LabelPosition [0, 23]
          LabelAlign    up
          TargetPortIndices "7"
          SampleTime    "0"
          CodeFcnLang   "2"
          CodeFcn       "local get_from_array_or_scalar = function(field, inde"
"x, majordim)\n\tif #field == 1 then\n   \treturn field[1]\n  \telseif #field "
"== majordim then\n  \t \treturn field[index]\n  \telse\n    \treturn nil\t\n "
" \tend  \n\nend\n\nlocal Require = {}\nlocal InitCode = {}\nlocal OutputCode "
"= {}\n\nlocal dim = #Block.InputSignal[1]\nfor i = 1, dim do\n  local pwm = B"
"lock.Mask.pwm[i]\n  table.insert(Require, string.format(\"EPWM:%i\", pwm))  "
"\n  \n  local prd = get_from_array_or_scalar(Block.Mask.prd, i, dim)\n  if pr"
"d == nil then\n    return \"Invalid width of parameter 'prd'.\" \t\n  end  \n"
"  \n  local dt = get_from_array_or_scalar(Block.Mask.dt, i, dim)\n  if dt == "
"nil then\n  \t return \"Invalid width of parameter 'dt'.\"\n  end    \n    \n"
"  local pwmParams = {period = prd, dt = dt}\n  \n  local instance, gpio = Tar"
"get.Coder.RegisterPwmOutBlock(pwm, pwmParams)\n  table.insert(Require, string"
".format(\"GPIO:%i\", gpio))    \n  \n  table.insert(InitCode, string.format("
"\"{\"))  \n  table.insert(InitCode, string.format(\"  PWM_Params_t *params = "
"HAL_getDefaultPwmParams(%i, %i);\", prd, dt))\n  table.insert(InitCode, strin"
"g.format(\"  HAL_setupPwmOut(%i, %i, params);\", instance, pwm))  \n  table.i"
"nsert(InitCode, string.format(\"}\"))\n     \n  table.insert(OutputCode, stri"
"ng.format(\"HAL_setPwmOutF(%i, %s);\", instance, Block.InputSignal[1][i]))\ne"
"nd\n\nreturn {\n  Include = \"hal.h\",\n  InitCode = InitCode,\n  OutputCode "
"= OutputCode,\n  Require = Require\n}\n\n"
          MaskType      "PWM Out"
          MaskDescription "Generate a configurable PWM signal on a digital out"
"put."
          MaskHelp      "pwmout_rtbox.html"
          MaskDisplay   "text(['PWM' char(10) 'Out'])"
          MaskIconFrame on
          MaskIconOpaque off
          MaskIconRotates on
          MaskInit      "if ~isreal(pwm) || ~isvector(pwm) ...\n   || any(floo"
"r(pwm) ~= pwm) || any(pwm < 0),\n  error('\"PWM resource(s)\" must be a scala"
"r or vector of positive or zero integers.')\nend"
          Parameter {
            Variable      "pwm"
            Prompt        "PWM resources(s)"
            Type          FreeText
            Value         "[3 4]"
            Show          on
            Tunable       off
            TabName       ""
          }
          Parameter {
            Variable      "prd"
            Prompt        "Period (counts)"
            Type          FreeText
            Value         "2250"
            Show          on
            Tunable       off
            TabName       ""
          }
          Parameter {
            Variable      "dt"
            Prompt        "Deadtime (counts)"
            Type          FreeText
            Value         "50"
            Show          on
            Tunable       off
            TabName       ""
          }
          Terminal {
            Type          Input
            Position      [-25, 0]
            Direction     left
          }
          Schematic {
            Location      [568, 388; 1472, 906]
            ZoomFactor    1
            SliderPosition [0, 0]
            ShowBrowser   off
            BrowserWidth  100
            Component {
              Type          TargetOutput
              Name          "1"
              Show          on
              Position      [260, 80]
              Direction     right
              Flipped       off
              Parameter {
                Variable      "Width"
                Value         "numel(pwm)"
                Show          off
              }
            }
            Component {
              Type          Input
              Name          "In1"
              Show          off
              Position      [60, 80]
              Direction     right
              Flipped       off
              Parameter {
                Variable      "Index"
                Value         "1"
                Show          on
              }
              Parameter {
                Variable      "Width"
                Value         "numel(pwm)"
                Show          off
              }
            }
            Connection {
              Type          Signal
              SrcComponent  "In1"
              SrcTerminal   1
              DstComponent  "1"
              DstTerminal   1
            }
          }
        }
        Component {
          Type          Constant
          Name          "Constant1"
          Show          on
          Position      [310, 470]
          Direction     right
          Flipped       off
          Frame         [-10, -10; 10, 10]
          LabelPosition [0, 13]
          LabelAlign    up
          Parameter {
            Variable      "Value"
            Value         "[0.5 0.1]"
            Show          on
          }
          Parameter {
            Variable      "DataType"
            Value         "9"
            Show          off
          }
        }
        Connection {
          Type          Signal
          SrcComponent  "Delay1"
          SrcTerminal   2
          DstComponent  "Logical\nOperator1"
          DstTerminal   2
        }
        Connection {
          Type          Signal
          SrcComponent  "C-Script"
          SrcTerminal   2
          DstComponent  "Digital Out (LED)"
          DstTerminal   1
        }
        Connection {
          Type          Signal
          SrcComponent  "Logical\nOperator1"
          SrcTerminal   1
          Points        [190, 100; 190, 65]
          Branch {
            Points        [65, 65; 65, 100]
            DstComponent  "Delay1"
            DstTerminal   1
          }
          Branch {
            DstComponent  "C-Script"
            DstTerminal   1
          }
        }
        Connection {
          Type          Signal
          SrcComponent  "Digital In1"
          SrcTerminal   1
          DstComponent  "Digital Out (LED)1"
          DstTerminal   1
        }
        Connection {
          Type          Signal
          SrcComponent  "Constant"
          SrcTerminal   1
          DstComponent  "PWM Out (ePWM0)"
          DstTerminal   1
        }
        Connection {
          Type          Signal
          SrcComponent  "Analog In (ADC0)"
          SrcTerminal   1
          DstComponent  "Display"
          DstTerminal   1
        }
        Connection {
          Type          Signal
          SrcComponent  "Analog In (ADC0)1"
          SrcTerminal   1
          DstComponent  "Display1"
          DstTerminal   1
        }
        Connection {
          Type          Signal
          SrcComponent  "Constant1"
          SrcTerminal   1
          DstComponent  "PWM Out (ePWM0)1"
          DstTerminal   1
        }
        Annotation {
          Name          "Blinking on Launchpad"
          Position      [100, 45]
        } 
      }
    }
  }
}
